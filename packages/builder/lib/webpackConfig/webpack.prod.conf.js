"use strict";

var _core = require("@cranejs/core");

const path = require('path');

const utils = require('./utils');

const webpack = require('webpack');

const merge = require('webpack-merge');

const baseWebpackConfig = require('./webpack.base.conf');

const CopyWebpackPlugin = require('copy-webpack-plugin');

const MiniCssExtractPlugin = require('mini-css-extract-plugin');

const OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin');

console.log(`正在构建 production 版本，
    当前环境设置: ${process.env.NODE_ENV},
    当前 MODE 设置: ${process.env.MODE}`);

module.exports = function (module) {
  const webpackConfig = merge(baseWebpackConfig, {
    module: {
      rules: utils.styleLoaders(module, {
        sourceMap: _core.config.build.productionSourceMap,
        extract: true,
        usePostCSS: true
      })
    },
    devtool: _core.config.build.productionSourceMap ? _core.config.build.devtool : false,
    mode: 'production',
    optimization: {
      moduleIds: 'hashed',
      splitChunks: {
        cacheGroups: {
          commons: {
            test: /[\\/]node_modules[\\/]/,
            name: 'vendors',
            chunks: 'all'
          }
        },
        minChunks: 2
      },
      minimize: true
    },
    plugins: [// extract css into its own file
    // Compress extracted CSS. We are using this plugin so that possible
    // duplicated CSS from different components can be deduped.
    new OptimizeCSSPlugin({
      cssProcessorOptions: _core.config.build.productionSourceMap ? {
        safe: true,
        map: {
          inline: false
        }
      } : {
        safe: true
      }
    }), // keep module.id stable when vendor modules does not change
    new webpack.HashedModuleIdsPlugin(), // enable scope hoisting
    new webpack.optimize.ModuleConcatenationPlugin()]
  });

  if (_core.config.build.productionGzip) {
    const CompressionWebpackPlugin = require('compression-webpack-plugin');

    webpackConfig.plugins.push(new CompressionWebpackPlugin({
      asset: '[path].gz[query]',
      algorithm: 'gzip',
      test: new RegExp('\\.(' + _core.config.build.productionGzipExtensions.join('|') + ')$'),
      threshold: 10240,
      minRatio: 0.8
    }));
  }

  return webpackConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWJwYWNrQ29uZmlnL3dlYnBhY2sucHJvZC5jb25mLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwidXRpbHMiLCJ3ZWJwYWNrIiwibWVyZ2UiLCJiYXNlV2VicGFja0NvbmZpZyIsIkNvcHlXZWJwYWNrUGx1Z2luIiwiTWluaUNzc0V4dHJhY3RQbHVnaW4iLCJPcHRpbWl6ZUNTU1BsdWdpbiIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJNT0RFIiwibW9kdWxlIiwiZXhwb3J0cyIsIndlYnBhY2tDb25maWciLCJydWxlcyIsInN0eWxlTG9hZGVycyIsInNvdXJjZU1hcCIsImNvbmZpZyIsImJ1aWxkIiwicHJvZHVjdGlvblNvdXJjZU1hcCIsImV4dHJhY3QiLCJ1c2VQb3N0Q1NTIiwiZGV2dG9vbCIsIm1vZGUiLCJvcHRpbWl6YXRpb24iLCJtb2R1bGVJZHMiLCJzcGxpdENodW5rcyIsImNhY2hlR3JvdXBzIiwiY29tbW9ucyIsInRlc3QiLCJuYW1lIiwiY2h1bmtzIiwibWluQ2h1bmtzIiwibWluaW1pemUiLCJwbHVnaW5zIiwiY3NzUHJvY2Vzc29yT3B0aW9ucyIsInNhZmUiLCJtYXAiLCJpbmxpbmUiLCJIYXNoZWRNb2R1bGVJZHNQbHVnaW4iLCJvcHRpbWl6ZSIsIk1vZHVsZUNvbmNhdGVuYXRpb25QbHVnaW4iLCJwcm9kdWN0aW9uR3ppcCIsIkNvbXByZXNzaW9uV2VicGFja1BsdWdpbiIsInB1c2giLCJhc3NldCIsImFsZ29yaXRobSIsIlJlZ0V4cCIsInByb2R1Y3Rpb25HemlwRXh0ZW5zaW9ucyIsImpvaW4iLCJ0aHJlc2hvbGQiLCJtaW5SYXRpbyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFHQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBQ0EsTUFBTUUsT0FBTyxHQUFH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QUFRLEVBQUU7QUFUZSxLQUE3QixDQURKO0FBYUg7O0FBRUQsU0FBT3RDLGFBQVA7QUFDSCxDQTVERCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgY29uZmlnXG59IGZyb20gJ0BjcmFuZWpzL2NvcmUnXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuY29uc3Qgd2VicGFjayA9IHJlcXVpcmUoJ3dlYnBhY2snKVxuY29uc3QgbWVyZ2UgPSByZXF1aXJlKCd3ZWJwYWNrLW1lcmdlJylcbmNvbnN0IGJhc2VXZWJwYWNrQ29uZmlnID0gcmVxdWlyZSgnLi93ZWJwYWNrLmJhc2UuY29uZicpXG5jb25zdCBDb3B5V2VicGFja1BsdWdpbiA9IHJlcXVpcmUoJ2NvcHktd2VicGFjay1wbHVnaW4nKVxuY29uc3QgTWluaUNzc0V4dHJhY3RQbHVnaW4gPSByZXF1aXJlKCdtaW5pLWNzcy1leHRyYWN0LXBsdWdpbicpXG5jb25zdCBPcHRpbWl6ZUNTU1BsdWdpbiA9IHJlcXVpcmUoJ29wdGltaXplLWNzcy1hc3NldHMtd2VicGFjay1wbHVnaW4nKVxuXG5jb25zb2xlLmxvZyhg5q2j5Zyo5p6E5bu6IHByb2R1Y3Rpb24g54mI5pys77yMXG4gICAg5b2T5YmN546v5aKD6K6+572uOiAke3Byb2Nlc3MuZW52Lk5PREVfRU5WfSxcbiAgICDlvZPliY0gTU9ERSDorr7nva46ICR7cHJvY2Vzcy5lbnYuTU9ERX1gKVxuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgIGNvbnN0IHdlYnBhY2tDb25maWcgPSBtZXJnZShiYXNlV2VicGFja0NvbmZpZywge1xuICAgICAgICBtb2R1bGU6IHtcbiAgICAgICAgICAgIHJ1bGVzOiB1dGlscy5zdHlsZUxvYWRlcnMobW9kdWxlLCB7XG4gICAgICAgICAgICAgICAgc291cmNlTWFwOiBjb25maWcuYnVpbGQucHJvZHVjdGlvblNvdXJjZU1hcCxcbiAgICAgICAgICAgICAgICBleHRyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZVBvc3RDU1M6IHRydWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIGRldnRvb2w6IGNvbmZpZy5idWlsZC5wcm9kdWN0aW9uU291cmNlTWFwID8gY29uZmlnLmJ1aWxkLmRldnRvb2wgOiBmYWxzZSxcbiAgICAgICAgbW9kZTogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICBvcHRpbWl6YXRpb246IHtcbiAgICAgICAgICAgIG1vZHVsZUlkczogJ2hhc2hlZCcsXG4gICAgICAgICAgICBzcGxpdENodW5rczoge1xuICAgICAgICAgICAgICAgIGNhY2hlR3JvdXBzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3Q6IC9bXFxcXC9dbm9kZV9tb2R1bGVzW1xcXFwvXS8sXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndmVuZG9ycycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVua3M6ICdhbGwnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1pbkNodW5rczogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1pbmltaXplOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHBsdWdpbnM6IFtcbiAgICAgICAgICAgIC8vIGV4dHJhY3QgY3NzIGludG8gaXRzIG93biBmaWxlXG4gICAgICAgICAgICAvLyBDb21wcmVzcyBleHRyYWN0ZWQgQ1NTLiBXZSBhcmUgdXNpbmcgdGhpcyBwbHVnaW4gc28gdGhhdCBwb3NzaWJsZVxuICAgICAgICAgICAgLy8gZHVwbGljYXRlZCBDU1MgZnJvbSBkaWZmZXJlbnQgY29tcG9uZW50cyBjYW4gYmUgZGVkdXBlZC5cbiAgICAgICAgICAgIG5ldyBPcHRpbWl6ZUNTU1BsdWdpbih7XG4gICAgICAgICAgICAgICAgY3NzUHJvY2Vzc29yT3B0aW9uczogY29uZmlnLmJ1aWxkLnByb2R1Y3Rpb25Tb3VyY2VNYXBcbiAgICAgICAgICAgICAgICAgICAgPyB7IHNhZmU6IHRydWUsIG1hcDogeyBpbmxpbmU6IGZhbHNlIH0gfVxuICAgICAgICAgICAgICAgICAgICA6IHsgc2FmZTogdHJ1ZSB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC8vIGtlZXAgbW9kdWxlLmlkIHN0YWJsZSB3aGVuIHZlbmRvciBtb2R1bGVzIGRvZXMgbm90IGNoYW5nZVxuICAgICAgICAgICAgbmV3IHdlYnBhY2suSGFzaGVkTW9kdWxlSWRzUGx1Z2luKCksXG4gICAgICAgICAgICAvLyBlbmFibGUgc2NvcGUgaG9pc3RpbmdcbiAgICAgICAgICAgIG5ldyB3ZWJwYWNrLm9wdGltaXplLk1vZHVsZUNvbmNhdGVuYXRpb25QbHVnaW4oKVxuICAgICAgICBdXG4gICAgfSlcblxuICAgIGlmIChjb25maWcuYnVpbGQucHJvZHVjdGlvbkd6aXApIHtcbiAgICAgICAgY29uc3QgQ29tcHJlc3Npb25XZWJwYWNrUGx1Z2luID0gcmVxdWlyZSgnY29tcHJlc3Npb24td2VicGFjay1wbHVnaW4nKVxuXG4gICAgICAgIHdlYnBhY2tDb25maWcucGx1Z2lucy5wdXNoKFxuICAgICAgICAgICAgbmV3IENvbXByZXNzaW9uV2VicGFja1BsdWdpbih7XG4gICAgICAgICAgICAgICAgYXNzZXQ6ICdbcGF0aF0uZ3pbcXVlcnldJyxcbiAgICAgICAgICAgICAgICBhbGdvcml0aG06ICdnemlwJyxcbiAgICAgICAgICAgICAgICB0ZXN0OiBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXFxcXC4oJyArXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5idWlsZC5wcm9kdWN0aW9uR3ppcEV4dGVuc2lvbnMuam9pbignfCcpICtcbiAgICAgICAgICAgICAgICAgICAgJykkJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkOiAxMDI0MCxcbiAgICAgICAgICAgICAgICBtaW5SYXRpbzogMC44XG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIHdlYnBhY2tDb25maWdcbn1cbiJdfQ==