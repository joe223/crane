"use strict";

var _core = require("@cranejs/core");

const path = require('path');

const utils = require('./utils');

const webpack = require('webpack');

const merge = require('webpack-merge');

const baseWebpackConfig = require('./webpack.base.conf');

const CopyWebpackPlugin = require('copy-webpack-plugin');

const MiniCssExtractPlugin = require('mini-css-extract-plugin');

const OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin');

const CompressionWebpackPlugin = require('compression-webpack-plugin');

module.exports = function (module) {
  const webpackConfig = merge(baseWebpackConfig, {
    module: {
      rules: utils.styleLoaders(module, {
        sourceMap: _core.config.build.productionSourceMap,
        extract: true,
        usePostCSS: true
      })
    },
    devtool: _core.config.build.productionSourceMap ? _core.config.build.devtool : false,
    mode: 'production',
    optimization: {
      moduleIds: 'hashed',
      splitChunks: {
        cacheGroups: {
          commons: {
            test: /[\\/]node_modules[\\/]/,
            name: 'vendors',
            chunks: 'all'
          }
        },
        minChunks: 2
      },
      minimize: true
    },
    plugins: [// extract css into its own file
    // Compress extracted CSS. We are using this plugin so that possible
    // duplicated CSS from different components can be deduped.
    new OptimizeCSSPlugin({
      cssProcessorOptions: _core.config.build.productionSourceMap ? {
        safe: true,
        map: {
          inline: false
        }
      } : {
        safe: true
      }
    }), // keep module.id stable when vendor modules does not change
    new webpack.HashedModuleIdsPlugin(), // enable scope hoisting
    new webpack.optimize.ModuleConcatenationPlugin()]
  });

  if (_core.config.build.productionGzip) {
    webpackConfig.plugins.push(new CompressionWebpackPlugin({
      asset: '[path].gz[query]',
      algorithm: 'gzip',
      test: new RegExp('\\.(' + _core.config.build.productionGzipExtensions.join('|') + ')$'),
      threshold: 10240,
      minRatio: 0.8
    }));
  }

  return webpackConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWJwYWNrQ29uZmlnL3dlYnBhY2sucHJvZC5jb25mLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwidXRpbHMiLCJ3ZWJwYWNrIiwibWVyZ2UiLCJiYXNlV2VicGFja0NvbmZpZyIsIkNvcHlXZWJwYWNrUGx1Z2luIiwiTWluaUNzc0V4dHJhY3RQbHVnaW4iLCJPcHRpbWl6ZUNTU1BsdWdpbiIsIkNvbXByZXNzaW9uV2VicGFja1BsdWdpbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3ZWJwYWNrQ29uZmlnIiwicnVsZXMiLCJzdHlsZUxvYWRlcnMiLCJzb3VyY2VNYXAiLCJjb25maWciLCJidWlsZCIsInByb2R1Y3Rpb25Tb3VyY2VNYXAiLCJleHRyYWN0IiwidXNlUG9zdENTUyIsImRldnRvb2wiLCJtb2RlIiwib3B0aW1pemF0aW9uIiwibW9kdWxlSWRzIiwic3BsaXRDaHVua3MiLCJjYWNoZUdyb3VwcyIsImNvbW1vbnMiLCJ0ZXN0IiwibmFtZSIsImNodW5rcyIsIm1pbkNodW5rcyIsIm1pbmltaXplIiwicGx1Z2lucyIsImNzc1Byb2Nlc3Nvck9wdGlvbnMiLCJzYWZlIiwibWFwIiwiaW5saW5lIiwiSGFzaGVkTW9kdWxlSWRzUGx1Z2luIiwib3B0aW1pemUiLCJNb2R1bGVDb25jYXRlbmF0aW9uUGx1Z2luIiwicHJvZHVjdGlvbkd6aXAiLCJwdXNoIiwiYXNzZXQiLCJhbGdvcml0aG0iLCJSZWdFeHAiLCJwcm9kdWN0aW9uR3ppcEV4dGVuc2lvbnMiLCJqb2luIiwidGhyZXNob2xkIiwibWluUmF0aW8iXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBR0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLE1BQU1FLE9BQU8sR0FBR0YsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsTUFBTUcsS0FBSyxHQUFHSCxPQUFPLENBQUMsZUFBRCxDQUFyQjs7QUFDQSxNQUFNSSxpQkFBaUIsR0FBR0osT0FBTyxDQUFDLHFCQUFELENBQWpDOztBQUNBLE1BQU1LLGlCQUFpQixHQUFHTCxPQUFPLENBQUMscUJBQUQsQ0FBakM7O0FBQ0EsTUFBTU0sb0JBQW9CLEdBQUdOLE9BQU8sQ0FBQyx5QkFBRCxDQUFwQzs7QUFDQSxNQUFNTyxpQkFBaUIsR0FBR1AsT0FBTyxDQUFDLG9DQUFELENBQWpDOztBQUNBLE1BQU1RLHdCQUF3QixHQUFHUixPQUFPLENBQUMsNEJBQUQsQ0FBeEM7O0FBRUFTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVRCxNQUFWLEVBQWtCO0FBQy9CLFFBQU1FLGFBQWEsR0FBR1IsS0FBSyxDQUFDQyxpQkFBRCxFQUFvQjtBQUMzQ0ssSUFBQUEsTUFBTSxFQUFFO0FBQ0pHLE1BQUFBLEtBQUssRUFBRVgsS0FBSyxDQUFDWSxZQUFOLENBQW1CSixNQUFuQixFQUEyQjtBQUM5QkssUUFBQUEsU0FBUyxFQUFFQyxhQUFPQyxLQUFQLENBQWFDLG1CQURNO0FBRTlCQyxRQUFBQSxPQUFPLEVBQUUsSUFGcUI7QUFHOUJDLFFBQUFBLFVBQVUsRUFBRTtBQUhrQixPQUEzQjtBQURILEtBRG1DO0FBUTNDQyxJQUFBQSxPQUFPLEVBQUVMLGFBQU9DLEtBQVAsQ0FBYUMsbUJBQWIsR0FBbUNGLGFBQU9DLEtBQVAsQ0FBYUksT0FBaEQsR0FBMEQsS0FSeEI7QUFTM0NDLElBQUFBLElBQUksRUFBRSxZQVRxQztBQVUzQ0MsSUFBQUEsWUFBWSxFQUFFO0FBQ1ZDLE1BQUFBLFNBQVMsRUFBRSxRQUREO0FBRVZDLE1BQUFBLFdBQVcsRUFBRTtBQUNUQyxRQUFBQSxXQUFXLEVBQUU7QUFDVEMsVUFBQUEsT0FBTyxFQUFFO0FBQ0xDLFlBQUFBLElBQUksRUFBRSx3QkFERDtBQUVMQyxZQUFBQSxJQUFJLEVBQUUsU0FGRDtBQUdMQyxZQUFBQSxNQUFNLEVBQUU7QUFISDtBQURBLFNBREo7QUFRVEMsUUFBQUEsU0FBUyxFQUFFO0FBUkYsT0FGSDtBQVlWQyxNQUFBQSxRQUFRLEVBQUU7QUFaQSxLQVY2QjtBQXdCM0NDLElBQUFBLE9BQU8sRUFBRSxDQUNMO0FBQ0E7QUFDQTtBQUNBLFFBQUl6QixpQkFBSixDQUFzQjtBQUNsQjBCLE1BQUFBLG1CQUFtQixFQUFFbEIsYUFBT0MsS0FBUCxDQUFhQyxtQkFBYixHQUNmO0FBQUVpQixRQUFBQSxJQUFJLEVBQUUsSUFBUjtBQUFjQyxRQUFBQSxHQUFHLEVBQUU7QUFBRUMsVUFBQUEsTUFBTSxFQUFFO0FBQVY7QUFBbkIsT0FEZSxHQUVmO0FBQUVGLFFBQUFBLElBQUksRUFBRTtBQUFSO0FBSFksS0FBdEIsQ0FKSyxFQVNMO0FBQ0EsUUFBSWhDLE9BQU8sQ0FBQ21DLHFCQUFaLEVBVkssRUFXTDtBQUNBLFFBQUluQyxPQUFPLENBQUNvQyxRQUFSLENBQWlCQyx5QkFBckIsRUFaSztBQXhCa0MsR0FBcEIsQ0FBM0I7O0FBd0NBLE1BQUl4QixhQUFPQyxLQUFQLENBQWF3QixjQUFqQixFQUFpQztBQUM3QjdCLElBQUFBLGFBQWEsQ0FBQ3FCLE9BQWQsQ0FBc0JTLElBQXRCLENBQ0ksSUFBSWpDLHdCQUFKLENBQTZCO0FBQ3pCa0MsTUFBQUEsS0FBSyxFQUFFLGtCQURrQjtBQUV6QkMsTUFBQUEsU0FBUyxFQUFFLE1BRmM7QUFHekJoQixNQUFBQSxJQUFJLEVBQUUsSUFBSWlCLE1BQUosQ0FDRixTQUNBN0IsYUFBT0MsS0FBUCxDQUFhNkIsd0JBQWIsQ0FBc0NDLElBQXRDLENBQTJDLEdBQTNDLENBREEsR0FFQSxJQUhFLENBSG1CO0FBUXpCQyxNQUFBQSxTQUFTLEVBQUUsS0FSYztBQVN6QkMsTUFBQUEsUUFBUSxFQUFFO0FBVGUsS0FBN0IsQ0FESjtBQWFIOztBQUVELFNBQU9yQyxhQUFQO0FBQ0gsQ0ExREQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIGNvbmZpZ1xufSBmcm9tICdAY3JhbmVqcy9jb3JlJ1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcbmNvbnN0IHdlYnBhY2sgPSByZXF1aXJlKCd3ZWJwYWNrJylcbmNvbnN0IG1lcmdlID0gcmVxdWlyZSgnd2VicGFjay1tZXJnZScpXG5jb25zdCBiYXNlV2VicGFja0NvbmZpZyA9IHJlcXVpcmUoJy4vd2VicGFjay5iYXNlLmNvbmYnKVxuY29uc3QgQ29weVdlYnBhY2tQbHVnaW4gPSByZXF1aXJlKCdjb3B5LXdlYnBhY2stcGx1Z2luJylcbmNvbnN0IE1pbmlDc3NFeHRyYWN0UGx1Z2luID0gcmVxdWlyZSgnbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4nKVxuY29uc3QgT3B0aW1pemVDU1NQbHVnaW4gPSByZXF1aXJlKCdvcHRpbWl6ZS1jc3MtYXNzZXRzLXdlYnBhY2stcGx1Z2luJylcbmNvbnN0IENvbXByZXNzaW9uV2VicGFja1BsdWdpbiA9IHJlcXVpcmUoJ2NvbXByZXNzaW9uLXdlYnBhY2stcGx1Z2luJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlKSB7XG4gICAgY29uc3Qgd2VicGFja0NvbmZpZyA9IG1lcmdlKGJhc2VXZWJwYWNrQ29uZmlnLCB7XG4gICAgICAgIG1vZHVsZToge1xuICAgICAgICAgICAgcnVsZXM6IHV0aWxzLnN0eWxlTG9hZGVycyhtb2R1bGUsIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VNYXA6IGNvbmZpZy5idWlsZC5wcm9kdWN0aW9uU291cmNlTWFwLFxuICAgICAgICAgICAgICAgIGV4dHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgdXNlUG9zdENTUzogdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgZGV2dG9vbDogY29uZmlnLmJ1aWxkLnByb2R1Y3Rpb25Tb3VyY2VNYXAgPyBjb25maWcuYnVpbGQuZGV2dG9vbCA6IGZhbHNlLFxuICAgICAgICBtb2RlOiAncHJvZHVjdGlvbicsXG4gICAgICAgIG9wdGltaXphdGlvbjoge1xuICAgICAgICAgICAgbW9kdWxlSWRzOiAnaGFzaGVkJyxcbiAgICAgICAgICAgIHNwbGl0Q2h1bmtzOiB7XG4gICAgICAgICAgICAgICAgY2FjaGVHcm91cHM6IHtcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdDogL1tcXFxcL11ub2RlX21vZHVsZXNbXFxcXC9dLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd2ZW5kb3JzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rczogJ2FsbCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWluQ2h1bmtzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWluaW1pemU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgcGx1Z2luczogW1xuICAgICAgICAgICAgLy8gZXh0cmFjdCBjc3MgaW50byBpdHMgb3duIGZpbGVcbiAgICAgICAgICAgIC8vIENvbXByZXNzIGV4dHJhY3RlZCBDU1MuIFdlIGFyZSB1c2luZyB0aGlzIHBsdWdpbiBzbyB0aGF0IHBvc3NpYmxlXG4gICAgICAgICAgICAvLyBkdXBsaWNhdGVkIENTUyBmcm9tIGRpZmZlcmVudCBjb21wb25lbnRzIGNhbiBiZSBkZWR1cGVkLlxuICAgICAgICAgICAgbmV3IE9wdGltaXplQ1NTUGx1Z2luKHtcbiAgICAgICAgICAgICAgICBjc3NQcm9jZXNzb3JPcHRpb25zOiBjb25maWcuYnVpbGQucHJvZHVjdGlvblNvdXJjZU1hcFxuICAgICAgICAgICAgICAgICAgICA/IHsgc2FmZTogdHJ1ZSwgbWFwOiB7IGlubGluZTogZmFsc2UgfSB9XG4gICAgICAgICAgICAgICAgICAgIDogeyBzYWZlOiB0cnVlIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgLy8ga2VlcCBtb2R1bGUuaWQgc3RhYmxlIHdoZW4gdmVuZG9yIG1vZHVsZXMgZG9lcyBub3QgY2hhbmdlXG4gICAgICAgICAgICBuZXcgd2VicGFjay5IYXNoZWRNb2R1bGVJZHNQbHVnaW4oKSxcbiAgICAgICAgICAgIC8vIGVuYWJsZSBzY29wZSBob2lzdGluZ1xuICAgICAgICAgICAgbmV3IHdlYnBhY2sub3B0aW1pemUuTW9kdWxlQ29uY2F0ZW5hdGlvblBsdWdpbigpXG4gICAgICAgIF1cbiAgICB9KVxuXG4gICAgaWYgKGNvbmZpZy5idWlsZC5wcm9kdWN0aW9uR3ppcCkge1xuICAgICAgICB3ZWJwYWNrQ29uZmlnLnBsdWdpbnMucHVzaChcbiAgICAgICAgICAgIG5ldyBDb21wcmVzc2lvbldlYnBhY2tQbHVnaW4oe1xuICAgICAgICAgICAgICAgIGFzc2V0OiAnW3BhdGhdLmd6W3F1ZXJ5XScsXG4gICAgICAgICAgICAgICAgYWxnb3JpdGhtOiAnZ3ppcCcsXG4gICAgICAgICAgICAgICAgdGVzdDogbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ1xcXFwuKCcgK1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuYnVpbGQucHJvZHVjdGlvbkd6aXBFeHRlbnNpb25zLmpvaW4oJ3wnKSArXG4gICAgICAgICAgICAgICAgICAgICcpJCdcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHRocmVzaG9sZDogMTAyNDAsXG4gICAgICAgICAgICAgICAgbWluUmF0aW86IDAuOFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiB3ZWJwYWNrQ29uZmlnXG59XG4iXX0=