"use strict";

var _core = require("@cranejs/core");

var _webpackMerge = _interopRequireDefault(require("webpack-merge"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const fs = require('fs');

const path = require('path');

const utils = require('./utils');

const webpack = require('webpack');

const baseWebpackConfig = require('./webpack.base.conf');

const FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin'); // const HOST = process.env.HOST


const PORT = process.env.PORT && Number(process.env.PORT);

module.exports = function (module) {
  const devWebpackConfig = (0, _webpackMerge.default)(baseWebpackConfig, {
    mode: 'development',
    module: {
      rules: utils.styleLoaders(module, {
        sourceMap: _core.config.dev.cssSourceMap,
        extract: false,
        usePostCSS: true
      })
    },
    // cheap-module-eval-source-map is faster for development
    devtool: _core.config.dev.devtool,
    // these devServer options should be customized in /config/index.js
    devServer: {
      clientLogLevel: 'warning',
      hot: true,
      contentBase: false,
      // since we use CopyWebpackPlugin.
      compress: true,
      host: _core.config.dev.host,
      port: PORT || _core.config.dev.port,
      // disableHostCheck: true,
      open: _core.config.dev.autoOpenBrowser,
      overlay: _core.config.dev.errorOverlay ? {
        warnings: false,
        errors: true
      } : false,
      proxy: _core.config.dev.proxyTable,
      quiet: true,
      // necessary for FriendlyErrorsPlugin
      watchOptions: {
        poll: _core.config.dev.poll
      },
      https: !!_core.config.dev.https
    },
    plugins: [new webpack.HotModuleReplacementPlugin(), new FriendlyErrorsWebpackPlugin()]
  });
  return devWebpackConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWJwYWNrQ29uZmlnL3dlYnBhY2suZGV2LmNvbmYuanMiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsInV0aWxzIiwid2VicGFjayIsImJhc2VXZWJwYWNrQ29uZmlnIiwiRnJpZW5kbHlFcnJvcnNXZWJwYWNrUGx1Z2luIiwiUE9SVCIsInByb2Nlc3MiLCJlbnYiLCJOdW1iZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGV2V2VicGFja0NvbmZpZyIsIm1vZGUiLCJydWxlcyIsInN0eWxlTG9hZGVycyIsInNvdXJjZU1hcCIsImNvbmZpZyIsImRldiIsImNzc1NvdXJjZU1hcCIsImV4dHJhY3QiLCJ1c2VQb3N0Q1NTIiwiZGV2dG9vbCIsImRldlNlcnZlciIsImNsaWVudExvZ0xldmVsIiwiaG90IiwiY29udGVudEJhc2UiLCJjb21wcmVzcyIsImhvc3QiLCJwb3J0Iiwib3BlbiIsImF1dG9PcGVuQnJvd3NlciIsIm92ZXJsYXkiLCJlcnJvck92ZXJsYXkiLCJ3YXJuaW5ncyIsImVycm9ycyIsInByb3h5IiwicHJveHlUYWJsZSIsInF1aWV0Iiwid2F0Y2hPcHRpb25zIiwicG9sbCIsImh0dHBzIiwicGx1Z2lucyIsIkhvdE1vZHVsZVJlcGxhY2VtZW50UGx1Z2luIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUdBOzs7O0FBRUEsTUFBTUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBQ0EsTUFBTUcsT0FBTyxHQUFHSCxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNSSxpQkFBaUIsR0FBR0osT0FBTyxDQUFDLHFCQUFELENBQWpDOztBQUNBLE1BQU1LLDJCQUEyQixHQUFHTCxPQUFPLENBQUMsZ0NBQUQsQ0FBM0MsQyxDQUVBOzs7QUFDQSxNQUFNTSxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaLElBQW9CRyxNQUFNLENBQUNGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFiLENBQXZDOztBQUVBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUQsTUFBVixFQUFrQjtBQUMvQixRQUFNRSxnQkFBZ0IsR0FBRywyQkFBTVIsaUJBQU4sRUFBeUI7QUFDOUNTLElBQUFBLElBQUksRUFBRSxhQUR3QztBQUU5Q0gsSUFBQUEsTUFBTSxFQUFFO0FBQ0pJLE1BQUFBLEtBQUssRUFBRVosS0FBSyxDQUFDYSxZQUFOLENBQW1CTCxNQUFuQixFQUEyQjtBQUM5Qk0sUUFBQUEsU0FBUyxFQUFFQyxhQUFPQyxHQUFQLENBQVdDLFlBRFE7QUFFOUJDLFFBQUFBLE9BQU8sRUFBRSxLQUZxQjtBQUc5QkMsUUFBQUEsVUFBVSxFQUFFO0FBSGtCLE9BQTNCO0FBREgsS0FGc0M7QUFTOUM7QUFDQUMsSUFBQUEsT0FBTyxFQUFFTCxhQUFPQyxHQUFQLENBQVdJLE9BVjBCO0FBWTlDO0FBQ0FDLElBQUFBLFNBQVMsRUFBRTtBQUNQQyxNQUFBQSxjQUFjLEVBQUUsU0FEVDtBQUVQQyxNQUFBQSxHQUFHLEVBQUUsSUFGRTtBQUdQQyxNQUFBQSxXQUFXLEVBQUUsS0FITjtBQUdhO0FBQ3BCQyxNQUFBQSxRQUFRLEVBQUUsSUFKSDtBQUtQQyxNQUFBQSxJQUFJLEVBQUVYLGFBQU9DLEdBQVAsQ0FBV1UsSUFMVjtBQU1QQyxNQUFBQSxJQUFJLEVBQUV2QixJQUFJLElBQUlXLGFBQU9DLEdBQVAsQ0FBV1csSUFObEI7QUFPUDtBQUNBQyxNQUFBQSxJQUFJLEVBQUViLGFBQU9DLEdBQVAsQ0FBV2EsZUFSVjtBQVNQQyxNQUFBQSxPQUFPLEVBQUVmLGFBQU9DLEdBQVAsQ0FBV2UsWUFBWCxHQUNIO0FBQUVDLFFBQUFBLFFBQVEsRUFBRSxLQUFaO0FBQW1CQyxRQUFBQSxNQUFNLEVBQUU7QUFBM0IsT0FERyxHQUVILEtBWEM7QUFZUEMsTUFBQUEsS0FBSyxFQUFFbkIsYUFBT0MsR0FBUCxDQUFXbUIsVUFaWDtBQWFQQyxNQUFBQSxLQUFLLEVBQUUsSUFiQTtBQWFNO0FBQ2JDLE1BQUFBLFlBQVksRUFBRTtBQUNWQyxRQUFBQSxJQUFJLEVBQUV2QixhQUFPQyxHQUFQLENBQVdzQjtBQURQLE9BZFA7QUFpQlBDLE1BQUFBLEtBQUssRUFBRSxDQUFDLENBQUN4QixhQUFPQyxHQUFQLENBQVd1QjtBQWpCYixLQWJtQztBQWdDOUNDLElBQUFBLE9BQU8sRUFBRSxDQUNMLElBQUl2QyxPQUFPLENBQUN3QywwQkFBWixFQURLLEVBRUwsSUFBSXRDLDJCQUFKLEVBRks7QUFoQ3FDLEdBQXpCLENBQXpCO0FBc0NBLFNBQU9PLGdCQUFQO0FBQ0gsQ0F4Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIGNvbmZpZ1xufSBmcm9tICdAY3JhbmVqcy9jb3JlJ1xuaW1wb3J0IG1lcmdlIGZyb20gJ3dlYnBhY2stbWVyZ2UnXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcbmNvbnN0IHdlYnBhY2sgPSByZXF1aXJlKCd3ZWJwYWNrJylcbmNvbnN0IGJhc2VXZWJwYWNrQ29uZmlnID0gcmVxdWlyZSgnLi93ZWJwYWNrLmJhc2UuY29uZicpXG5jb25zdCBGcmllbmRseUVycm9yc1dlYnBhY2tQbHVnaW4gPSByZXF1aXJlKCdmcmllbmRseS1lcnJvcnMtd2VicGFjay1wbHVnaW4nKVxuXG4vLyBjb25zdCBIT1NUID0gcHJvY2Vzcy5lbnYuSE9TVFxuY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgJiYgTnVtYmVyKHByb2Nlc3MuZW52LlBPUlQpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgIGNvbnN0IGRldldlYnBhY2tDb25maWcgPSBtZXJnZShiYXNlV2VicGFja0NvbmZpZywge1xuICAgICAgICBtb2RlOiAnZGV2ZWxvcG1lbnQnLFxuICAgICAgICBtb2R1bGU6IHtcbiAgICAgICAgICAgIHJ1bGVzOiB1dGlscy5zdHlsZUxvYWRlcnMobW9kdWxlLCB7XG4gICAgICAgICAgICAgICAgc291cmNlTWFwOiBjb25maWcuZGV2LmNzc1NvdXJjZU1hcCxcbiAgICAgICAgICAgICAgICBleHRyYWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1c2VQb3N0Q1NTOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICAvLyBjaGVhcC1tb2R1bGUtZXZhbC1zb3VyY2UtbWFwIGlzIGZhc3RlciBmb3IgZGV2ZWxvcG1lbnRcbiAgICAgICAgZGV2dG9vbDogY29uZmlnLmRldi5kZXZ0b29sLFxuXG4gICAgICAgIC8vIHRoZXNlIGRldlNlcnZlciBvcHRpb25zIHNob3VsZCBiZSBjdXN0b21pemVkIGluIC9jb25maWcvaW5kZXguanNcbiAgICAgICAgZGV2U2VydmVyOiB7XG4gICAgICAgICAgICBjbGllbnRMb2dMZXZlbDogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgaG90OiB0cnVlLFxuICAgICAgICAgICAgY29udGVudEJhc2U6IGZhbHNlLCAvLyBzaW5jZSB3ZSB1c2UgQ29weVdlYnBhY2tQbHVnaW4uXG4gICAgICAgICAgICBjb21wcmVzczogdHJ1ZSxcbiAgICAgICAgICAgIGhvc3Q6IGNvbmZpZy5kZXYuaG9zdCxcbiAgICAgICAgICAgIHBvcnQ6IFBPUlQgfHwgY29uZmlnLmRldi5wb3J0LFxuICAgICAgICAgICAgLy8gZGlzYWJsZUhvc3RDaGVjazogdHJ1ZSxcbiAgICAgICAgICAgIG9wZW46IGNvbmZpZy5kZXYuYXV0b09wZW5Ccm93c2VyLFxuICAgICAgICAgICAgb3ZlcmxheTogY29uZmlnLmRldi5lcnJvck92ZXJsYXlcbiAgICAgICAgICAgICAgICA/IHsgd2FybmluZ3M6IGZhbHNlLCBlcnJvcnM6IHRydWUgfVxuICAgICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBwcm94eTogY29uZmlnLmRldi5wcm94eVRhYmxlLFxuICAgICAgICAgICAgcXVpZXQ6IHRydWUsIC8vIG5lY2Vzc2FyeSBmb3IgRnJpZW5kbHlFcnJvcnNQbHVnaW5cbiAgICAgICAgICAgIHdhdGNoT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHBvbGw6IGNvbmZpZy5kZXYucG9sbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBodHRwczogISFjb25maWcuZGV2Lmh0dHBzXG4gICAgICAgIH0sXG4gICAgICAgIHBsdWdpbnM6IFtcbiAgICAgICAgICAgIG5ldyB3ZWJwYWNrLkhvdE1vZHVsZVJlcGxhY2VtZW50UGx1Z2luKCksXG4gICAgICAgICAgICBuZXcgRnJpZW5kbHlFcnJvcnNXZWJwYWNrUGx1Z2luKClcbiAgICAgICAgXVxuICAgIH0pXG5cbiAgICByZXR1cm4gZGV2V2VicGFja0NvbmZpZ1xufVxuIl19