"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cssLoaders = cssLoaders;
exports.styleLoaders = styleLoaders;

var _miniCssExtractPlugin = _interopRequireDefault(require("mini-css-extract-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cssLoaders(options) {
  options = options || {}; // https://github.com/webpack-contrib/css-loader/issues/1157
  // https://github.com/webpack-contrib/css-loader/commit/bc19ddd8779dafbc2a420870a3cb841041ce9c7c

  const cssLoader = {
    loader: 'css-loader',
    options: {
      esModule: false,
      sourceMap: options.sourceMap
    }
  };
  const postcssLoader = {
    loader: 'postcss-loader',
    options: {
      sourceMap: options.sourceMap
    }
  }; // generate loader string to be used with extract text plugin

  function generateLoaders(loader, loaderOptions) {
    const loaders = [cssLoader];

    if (options.usePostCSS) {
      loaders.push(postcssLoader);
    }

    if (loader) {
      loaders.push({
        loader: loader + '-loader',
        options: Object.assign({}, loaderOptions, {
          sourceMap: options.sourceMap
        })
      });
    }

    return [options.extract ? _miniCssExtractPlugin.default.loader : 'vue-style-loader'].concat(loaders);
  } // https://vue-loader.vuejs.org/en/configurations/extract-css.html


  return {
    css: generateLoaders(),
    postcss: generateLoaders(),
    less: generateLoaders('less'),
    sass: generateLoaders('sass', {
      indentedSyntax: true
    }),
    scss: generateLoaders('sass'),
    stylus: generateLoaders('stylus'),
    styl: generateLoaders('stylus')
  };
}

function styleLoaders(options) {
  const output = [];
  const loaders = exports.cssLoaders(options);

  for (const extension in loaders) {
    const loader = loaders[extension];
    output.push({
      test: new RegExp('\\.' + extension + '$'),
      use: loader
    });
  }

  return output;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWJwYWNrQ29uZmlnL3V0aWxzLmpzIl0sIm5hbWVzIjpbImNzc0xvYWRlcnMiLCJvcHRpb25zIiwiY3NzTG9hZGVyIiwibG9hZGVyIiwiZXNNb2R1bGUiLCJzb3VyY2VNYXAiLCJwb3N0Y3NzTG9hZGVyIiwiZ2VuZXJhdGVMb2FkZXJzIiwibG9hZGVyT3B0aW9ucyIsImxvYWRlcnMiLCJ1c2VQb3N0Q1NTIiwicHVzaCIsIk9iamVjdCIsImFzc2lnbiIsImV4dHJhY3QiLCJNaW5pQ3NzRXh0cmFjdFBsdWdpbiIsImNvbmNhdCIsImNzcyIsInBvc3Rjc3MiLCJsZXNzIiwic2FzcyIsImluZGVudGVkU3ludGF4Iiwic2NzcyIsInN0eWx1cyIsInN0eWwiLCJzdHlsZUxvYWRlcnMiLCJvdXRwdXQiLCJleHBvcnRzIiwiZXh0ZW5zaW9uIiwidGVzdCIsIlJlZ0V4cCIsInVzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUVPLFNBQVNBLFVBQVQsQ0FBb0JDLE9BQXBCLEVBQTZCO0FBQ2hDQSxFQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQixDQURnQyxDQUdoQztBQUNBOztBQUNBLFFBQU1DLFNBQVMsR0FBRztBQUNkQyxJQUFBQSxNQUFNLEVBQUUsWUFETTtBQUVkRixJQUFBQSxPQUFPLEVBQUU7QUFDTEcsTUFBQUEsUUFBUSxFQUFFLEtBREw7QUFFTEMsTUFBQUEsU0FBUyxFQUFFSixPQUFPLENBQUNJO0FBRmQ7QUFGSyxHQUFsQjtBQVFBLFFBQU1DLGFBQWEsR0FBRztBQUNsQkgsSUFBQUEsTUFBTSxFQUFFLGdCQURVO0FBRWxCRixJQUFBQSxPQUFPLEVBQUU7QUFDTEksTUFBQUEsU0FBUyxFQUFFSixPQUFPLENBQUNJO0FBRGQ7QUFGUyxHQUF0QixDQWJnQyxDQW9CaEM7O0FBQ0EsV0FBU0UsZUFBVCxDQUF5QkosTUFBekIsRUFBaUNLLGFBQWpDLEVBQWdEO0FBQzVDLFVBQU1DLE9BQU8sR0FBRyxDQUFDUCxTQUFELENBQWhCOztBQUVBLFFBQUlELE9BQU8sQ0FBQ1MsVUFBWixFQUF3QjtBQUNwQkQsTUFBQUEsT0FBTyxDQUFDRSxJQUFSLENBQWFMLGFBQWI7QUFDSDs7QUFFRCxRQUFJSCxNQUFKLEVBQVk7QUFDUk0sTUFBQUEsT0FBTyxDQUFDRSxJQUFSLENBQWE7QUFDVFIsUUFBQUEsTUFBTSxFQUFFQSxNQUFNLEdBQUcsU0FEUjtBQUVURixRQUFBQSxPQUFPLEVBQUVXLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JMLGFBQWxCLEVBQWlDO0FBQ3RDSCxVQUFBQSxTQUFTLEVBQUVKLE9BQU8sQ0FBQ0k7QUFEbUIsU0FBakM7QUFGQSxPQUFiO0FBTUg7O0FBRUQsV0FBTyxDQUNISixPQUFPLENBQUNhLE9BQVIsR0FBa0JDLDhCQUFxQlosTUFBdkMsR0FBZ0Qsa0JBRDdDLEVBRUxhLE1BRkssQ0FFRVAsT0FGRixDQUFQO0FBR0gsR0F4QytCLENBMENoQzs7O0FBQ0EsU0FBTztBQUNIUSxJQUFBQSxHQUFHLEVBQUVWLGVBQWUsRUFEakI7QUFFSFcsSUFBQUEsT0FBTyxFQUFFWCxlQUFlLEVBRnJCO0FBR0hZLElBQUFBLElBQUksRUFBRVosZUFBZSxDQUFDLE1BQUQsQ0FIbEI7QUFJSGEsSUFBQUEsSUFBSSxFQUFFYixlQUFlLENBQUMsTUFBRCxFQUFTO0FBQUVjLE1BQUFBLGNBQWMsRUFBRTtBQUFsQixLQUFULENBSmxCO0FBS0hDLElBQUFBLElBQUksRUFBRWYsZUFBZSxDQUFDLE1BQUQsQ0FMbEI7QUFNSGdCLElBQUFBLE1BQU0sRUFBRWhCLGVBQWUsQ0FBQyxRQUFELENBTnBCO0FBT0hpQixJQUFBQSxJQUFJLEVBQUVqQixlQUFlLENBQUMsUUFBRDtBQVBsQixHQUFQO0FBU0g7O0FBRU0sU0FBU2tCLFlBQVQsQ0FBc0J4QixPQUF0QixFQUErQjtBQUNsQyxRQUFNeUIsTUFBTSxHQUFHLEVBQWY7QUFDQSxRQUFNakIsT0FBTyxHQUFHa0IsT0FBTyxDQUFDM0IsVUFBUixDQUFtQkMsT0FBbkIsQ0FBaEI7O0FBRUEsT0FBSyxNQUFNMkIsU0FBWCxJQUF3Qm5CLE9BQXhCLEVBQWlDO0FBQzdCLFVBQU1OLE1BQU0sR0FBR00sT0FBTyxDQUFDbUIsU0FBRCxDQUF0QjtBQUNBRixJQUFBQSxNQUFNLENBQUNmLElBQVAsQ0FBWTtBQUNSa0IsTUFBQUEsSUFBSSxFQUFFLElBQUlDLE1BQUosQ0FBVyxRQUFRRixTQUFSLEdBQW9CLEdBQS9CLENBREU7QUFFUkcsTUFBQUEsR0FBRyxFQUFFNUI7QUFGRyxLQUFaO0FBSUg7O0FBRUQsU0FBT3VCLE1BQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNaW5pQ3NzRXh0cmFjdFBsdWdpbiBmcm9tICdtaW5pLWNzcy1leHRyYWN0LXBsdWdpbidcblxuZXhwb3J0IGZ1bmN0aW9uIGNzc0xvYWRlcnMob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL2Nzcy1sb2FkZXIvaXNzdWVzLzExNTdcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL2Nzcy1sb2FkZXIvY29tbWl0L2JjMTlkZGQ4Nzc5ZGFmYmMyYTQyMDg3MGEzY2I4NDEwNDFjZTljN2NcbiAgICBjb25zdCBjc3NMb2FkZXIgPSB7XG4gICAgICAgIGxvYWRlcjogJ2Nzcy1sb2FkZXInLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBlc01vZHVsZTogZmFsc2UsXG4gICAgICAgICAgICBzb3VyY2VNYXA6IG9wdGlvbnMuc291cmNlTWFwXG4gICAgICAgIH0sXG4gICAgfVxuXG4gICAgY29uc3QgcG9zdGNzc0xvYWRlciA9IHtcbiAgICAgICAgbG9hZGVyOiAncG9zdGNzcy1sb2FkZXInLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBzb3VyY2VNYXA6IG9wdGlvbnMuc291cmNlTWFwLFxuICAgICAgICB9LFxuICAgIH1cblxuICAgIC8vIGdlbmVyYXRlIGxvYWRlciBzdHJpbmcgdG8gYmUgdXNlZCB3aXRoIGV4dHJhY3QgdGV4dCBwbHVnaW5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUxvYWRlcnMobG9hZGVyLCBsb2FkZXJPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxvYWRlcnMgPSBbY3NzTG9hZGVyXVxuXG4gICAgICAgIGlmIChvcHRpb25zLnVzZVBvc3RDU1MpIHtcbiAgICAgICAgICAgIGxvYWRlcnMucHVzaChwb3N0Y3NzTG9hZGVyKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvYWRlcikge1xuICAgICAgICAgICAgbG9hZGVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBsb2FkZXI6IGxvYWRlciArICctbG9hZGVyJyxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBsb2FkZXJPcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcDogb3B0aW9ucy5zb3VyY2VNYXAsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG9wdGlvbnMuZXh0cmFjdCA/IE1pbmlDc3NFeHRyYWN0UGx1Z2luLmxvYWRlciA6ICd2dWUtc3R5bGUtbG9hZGVyJyxcbiAgICAgICAgXS5jb25jYXQobG9hZGVycylcbiAgICB9XG5cbiAgICAvLyBodHRwczovL3Z1ZS1sb2FkZXIudnVlanMub3JnL2VuL2NvbmZpZ3VyYXRpb25zL2V4dHJhY3QtY3NzLmh0bWxcbiAgICByZXR1cm4ge1xuICAgICAgICBjc3M6IGdlbmVyYXRlTG9hZGVycygpLFxuICAgICAgICBwb3N0Y3NzOiBnZW5lcmF0ZUxvYWRlcnMoKSxcbiAgICAgICAgbGVzczogZ2VuZXJhdGVMb2FkZXJzKCdsZXNzJyksXG4gICAgICAgIHNhc3M6IGdlbmVyYXRlTG9hZGVycygnc2FzcycsIHsgaW5kZW50ZWRTeW50YXg6IHRydWUgfSksXG4gICAgICAgIHNjc3M6IGdlbmVyYXRlTG9hZGVycygnc2FzcycpLFxuICAgICAgICBzdHlsdXM6IGdlbmVyYXRlTG9hZGVycygnc3R5bHVzJyksXG4gICAgICAgIHN0eWw6IGdlbmVyYXRlTG9hZGVycygnc3R5bHVzJyksXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVMb2FkZXJzKG9wdGlvbnMpIHtcbiAgICBjb25zdCBvdXRwdXQgPSBbXVxuICAgIGNvbnN0IGxvYWRlcnMgPSBleHBvcnRzLmNzc0xvYWRlcnMob3B0aW9ucylcblxuICAgIGZvciAoY29uc3QgZXh0ZW5zaW9uIGluIGxvYWRlcnMpIHtcbiAgICAgICAgY29uc3QgbG9hZGVyID0gbG9hZGVyc1tleHRlbnNpb25dXG4gICAgICAgIG91dHB1dC5wdXNoKHtcbiAgICAgICAgICAgIHRlc3Q6IG5ldyBSZWdFeHAoJ1xcXFwuJyArIGV4dGVuc2lvbiArICckJyksXG4gICAgICAgICAgICB1c2U6IGxvYWRlcixcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0XG59XG4iXX0=