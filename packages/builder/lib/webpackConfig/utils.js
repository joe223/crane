"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cssLoaders = cssLoaders;
exports.styleLoaders = styleLoaders;

var _miniCssExtractPlugin = _interopRequireDefault(require("mini-css-extract-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cssLoaders(options) {
  options = options || {};
  const cssLoader = {
    loader: 'css-loader',
    options: {
      esModule: false,
      sourceMap: options.sourceMap
    }
  };
  const postcssLoader = {
    loader: 'postcss-loader',
    options: {
      sourceMap: options.sourceMap
    }
  }; // generate loader string to be used with extract text plugin

  function generateLoaders(loader, loaderOptions) {
    const loaders = [cssLoader];

    if (options.usePostCSS) {
      loaders.push(postcssLoader);
    }

    if (loader) {
      loaders.push({
        loader: loader + '-loader',
        options: Object.assign({}, loaderOptions, {
          sourceMap: options.sourceMap
        })
      });
    }

    return [options.extract ? _miniCssExtractPlugin.default.loader : 'vue-style-loader'].concat(loaders);
  } // https://vue-loader.vuejs.org/en/configurations/extract-css.html


  return {
    css: generateLoaders(),
    postcss: generateLoaders(),
    less: generateLoaders('less'),
    sass: generateLoaders('sass', {
      indentedSyntax: true
    }),
    scss: generateLoaders('sass'),
    stylus: generateLoaders('stylus'),
    styl: generateLoaders('stylus')
  };
}

function styleLoaders(options) {
  const output = [];
  const loaders = exports.cssLoaders(options);

  for (const extension in loaders) {
    const loader = loaders[extension];
    output.push({
      test: new RegExp('\\.' + extension + '$'),
      use: loader
    });
  }

  return output;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWJwYWNrQ29uZmlnL3V0aWxzLmpzIl0sIm5hbWVzIjpbImNzc0xvYWRlcnMiLCJvcHRpb25zIiwiY3NzTG9hZGVyIiwibG9hZGVyIiwiZXNNb2R1bGUiLCJzb3VyY2VNYXAiLCJwb3N0Y3NzTG9hZGVyIiwiZ2VuZXJhdGVMb2FkZXJzIiwibG9hZGVyT3B0aW9ucyIsImxvYWRlcnMiLCJ1c2VQb3N0Q1NTIiwicHVzaCIsIk9iamVjdCIsImFzc2lnbiIsImV4dHJhY3QiLCJNaW5pQ3NzRXh0cmFjdFBsdWdpbiIsImNvbmNhdCIsImNzcyIsInBvc3Rjc3MiLCJsZXNzIiwic2FzcyIsImluZGVudGVkU3ludGF4Iiwic2NzcyIsInN0eWx1cyIsInN0eWwiLCJzdHlsZUxvYWRlcnMiLCJvdXRwdXQiLCJleHBvcnRzIiwiZXh0ZW5zaW9uIiwidGVzdCIsIlJlZ0V4cCIsInVzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUVPLFNBQVNBLFVBQVQsQ0FBb0JDLE9BQXBCLEVBQTZCO0FBQ2hDQSxFQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtBQUVBLFFBQU1DLFNBQVMsR0FBRztBQUNkQyxJQUFBQSxNQUFNLEVBQUUsWUFETTtBQUVkRixJQUFBQSxPQUFPLEVBQUU7QUFDTEcsTUFBQUEsUUFBUSxFQUFFLEtBREw7QUFFTEMsTUFBQUEsU0FBUyxFQUFFSixPQUFPLENBQUNJO0FBRmQ7QUFGSyxHQUFsQjtBQVFBLFFBQU1DLGFBQWEsR0FBRztBQUNsQkgsSUFBQUEsTUFBTSxFQUFFLGdCQURVO0FBRWxCRixJQUFBQSxPQUFPLEVBQUU7QUFDTEksTUFBQUEsU0FBUyxFQUFFSixPQUFPLENBQUNJO0FBRGQ7QUFGUyxHQUF0QixDQVhnQyxDQWtCaEM7O0FBQ0EsV0FBU0UsZUFBVCxDQUF5QkosTUFBekIsRUFBaUNLLGFBQWpDLEVBQWdEO0FBQzVDLFVBQU1DLE9BQU8sR0FBRyxDQUFDUCxTQUFELENBQWhCOztBQUVBLFFBQUlELE9BQU8sQ0FBQ1MsVUFBWixFQUF3QjtBQUNwQkQsTUFBQUEsT0FBTyxDQUFDRSxJQUFSLENBQWFMLGFBQWI7QUFDSDs7QUFFRCxRQUFJSCxNQUFKLEVBQVk7QUFDUk0sTUFBQUEsT0FBTyxDQUFDRSxJQUFSLENBQWE7QUFDVFIsUUFBQUEsTUFBTSxFQUFFQSxNQUFNLEdBQUcsU0FEUjtBQUVURixRQUFBQSxPQUFPLEVBQUVXLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JMLGFBQWxCLEVBQWlDO0FBQ3RDSCxVQUFBQSxTQUFTLEVBQUVKLE9BQU8sQ0FBQ0k7QUFEbUIsU0FBakM7QUFGQSxPQUFiO0FBTUg7O0FBRUQsV0FBTyxDQUNISixPQUFPLENBQUNhLE9BQVIsR0FBa0JDLDhCQUFxQlosTUFBdkMsR0FBZ0Qsa0JBRDdDLEVBRUxhLE1BRkssQ0FFRVAsT0FGRixDQUFQO0FBR0gsR0F0QytCLENBd0NoQzs7O0FBQ0EsU0FBTztBQUNIUSxJQUFBQSxHQUFHLEVBQUVWLGVBQWUsRUFEakI7QUFFSFcsSUFBQUEsT0FBTyxFQUFFWCxlQUFlLEVBRnJCO0FBR0hZLElBQUFBLElBQUksRUFBRVosZUFBZSxDQUFDLE1BQUQsQ0FIbEI7QUFJSGEsSUFBQUEsSUFBSSxFQUFFYixlQUFlLENBQUMsTUFBRCxFQUFTO0FBQUVjLE1BQUFBLGNBQWMsRUFBRTtBQUFsQixLQUFULENBSmxCO0FBS0hDLElBQUFBLElBQUksRUFBRWYsZUFBZSxDQUFDLE1BQUQsQ0FMbEI7QUFNSGdCLElBQUFBLE1BQU0sRUFBRWhCLGVBQWUsQ0FBQyxRQUFELENBTnBCO0FBT0hpQixJQUFBQSxJQUFJLEVBQUVqQixlQUFlLENBQUMsUUFBRDtBQVBsQixHQUFQO0FBU0g7O0FBRU0sU0FBU2tCLFlBQVQsQ0FBc0J4QixPQUF0QixFQUErQjtBQUNsQyxRQUFNeUIsTUFBTSxHQUFHLEVBQWY7QUFDQSxRQUFNakIsT0FBTyxHQUFHa0IsT0FBTyxDQUFDM0IsVUFBUixDQUFtQkMsT0FBbkIsQ0FBaEI7O0FBRUEsT0FBSyxNQUFNMkIsU0FBWCxJQUF3Qm5CLE9BQXhCLEVBQWlDO0FBQzdCLFVBQU1OLE1BQU0sR0FBR00sT0FBTyxDQUFDbUIsU0FBRCxDQUF0QjtBQUNBRixJQUFBQSxNQUFNLENBQUNmLElBQVAsQ0FBWTtBQUNSa0IsTUFBQUEsSUFBSSxFQUFFLElBQUlDLE1BQUosQ0FBVyxRQUFRRixTQUFSLEdBQW9CLEdBQS9CLENBREU7QUFFUkcsTUFBQUEsR0FBRyxFQUFFNUI7QUFGRyxLQUFaO0FBSUg7O0FBRUQsU0FBT3VCLE1BQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNaW5pQ3NzRXh0cmFjdFBsdWdpbiBmcm9tICdtaW5pLWNzcy1leHRyYWN0LXBsdWdpbidcblxuZXhwb3J0IGZ1bmN0aW9uIGNzc0xvYWRlcnMob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgICBjb25zdCBjc3NMb2FkZXIgPSB7XG4gICAgICAgIGxvYWRlcjogJ2Nzcy1sb2FkZXInLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBlc01vZHVsZTogZmFsc2UsXG4gICAgICAgICAgICBzb3VyY2VNYXA6IG9wdGlvbnMuc291cmNlTWFwLFxuICAgICAgICB9LFxuICAgIH1cblxuICAgIGNvbnN0IHBvc3Rjc3NMb2FkZXIgPSB7XG4gICAgICAgIGxvYWRlcjogJ3Bvc3Rjc3MtbG9hZGVyJyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc291cmNlTWFwOiBvcHRpb25zLnNvdXJjZU1hcCxcbiAgICAgICAgfSxcbiAgICB9XG5cbiAgICAvLyBnZW5lcmF0ZSBsb2FkZXIgc3RyaW5nIHRvIGJlIHVzZWQgd2l0aCBleHRyYWN0IHRleHQgcGx1Z2luXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVMb2FkZXJzKGxvYWRlciwgbG9hZGVyT3B0aW9ucykge1xuICAgICAgICBjb25zdCBsb2FkZXJzID0gW2Nzc0xvYWRlcl1cblxuICAgICAgICBpZiAob3B0aW9ucy51c2VQb3N0Q1NTKSB7XG4gICAgICAgICAgICBsb2FkZXJzLnB1c2gocG9zdGNzc0xvYWRlcilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb2FkZXIpIHtcbiAgICAgICAgICAgIGxvYWRlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgbG9hZGVyOiBsb2FkZXIgKyAnLWxvYWRlcicsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgbG9hZGVyT3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXA6IG9wdGlvbnMuc291cmNlTWFwLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBvcHRpb25zLmV4dHJhY3QgPyBNaW5pQ3NzRXh0cmFjdFBsdWdpbi5sb2FkZXIgOiAndnVlLXN0eWxlLWxvYWRlcicsXG4gICAgICAgIF0uY29uY2F0KGxvYWRlcnMpXG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly92dWUtbG9hZGVyLnZ1ZWpzLm9yZy9lbi9jb25maWd1cmF0aW9ucy9leHRyYWN0LWNzcy5odG1sXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3NzOiBnZW5lcmF0ZUxvYWRlcnMoKSxcbiAgICAgICAgcG9zdGNzczogZ2VuZXJhdGVMb2FkZXJzKCksXG4gICAgICAgIGxlc3M6IGdlbmVyYXRlTG9hZGVycygnbGVzcycpLFxuICAgICAgICBzYXNzOiBnZW5lcmF0ZUxvYWRlcnMoJ3Nhc3MnLCB7IGluZGVudGVkU3ludGF4OiB0cnVlIH0pLFxuICAgICAgICBzY3NzOiBnZW5lcmF0ZUxvYWRlcnMoJ3Nhc3MnKSxcbiAgICAgICAgc3R5bHVzOiBnZW5lcmF0ZUxvYWRlcnMoJ3N0eWx1cycpLFxuICAgICAgICBzdHlsOiBnZW5lcmF0ZUxvYWRlcnMoJ3N0eWx1cycpLFxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlTG9hZGVycyhvcHRpb25zKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gW11cbiAgICBjb25zdCBsb2FkZXJzID0gZXhwb3J0cy5jc3NMb2FkZXJzKG9wdGlvbnMpXG5cbiAgICBmb3IgKGNvbnN0IGV4dGVuc2lvbiBpbiBsb2FkZXJzKSB7XG4gICAgICAgIGNvbnN0IGxvYWRlciA9IGxvYWRlcnNbZXh0ZW5zaW9uXVxuICAgICAgICBvdXRwdXQucHVzaCh7XG4gICAgICAgICAgICB0ZXN0OiBuZXcgUmVnRXhwKCdcXFxcLicgKyBleHRlbnNpb24gKyAnJCcpLFxuICAgICAgICAgICAgdXNlOiBsb2FkZXIsXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dFxufVxuIl19