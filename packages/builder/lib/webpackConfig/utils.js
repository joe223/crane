"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cssLoaders = cssLoaders;
exports.styleLoaders = styleLoaders;

var _miniCssExtractPlugin = _interopRequireDefault(require("mini-css-extract-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cssLoaders(options) {
  options = options || {};
  const cssLoader = {
    loader: 'css-loader',
    options: {
      sourceMap: options.sourceMap
    }
  };
  const postcssLoader = {
    loader: 'postcss-loader',
    options: {
      sourceMap: options.sourceMap
    }
  }; // generate loader string to be used with extract text plugin

  function generateLoaders(loader, loaderOptions) {
    const loaders = [cssLoader];

    if (options.usePostCSS) {
      loaders.push(postcssLoader);
    }

    if (loader) {
      loaders.push({
        loader: loader + '-loader',
        options: Object.assign({}, loaderOptions, {
          sourceMap: options.sourceMap
        })
      });
    }

    return [options.extract ? _miniCssExtractPlugin.default.loader : 'vue-style-loader'].concat(loaders);
  } // https://vue-loader.vuejs.org/en/configurations/extract-css.html


  return {
    css: generateLoaders(),
    postcss: generateLoaders(),
    less: generateLoaders('less'),
    sass: generateLoaders('sass', {
      indentedSyntax: true
    }),
    scss: generateLoaders('sass'),
    stylus: generateLoaders('stylus'),
    styl: generateLoaders('stylus')
  };
}

function styleLoaders(options) {
  const output = [];
  const loaders = exports.cssLoaders(options);

  for (const extension in loaders) {
    const loader = loaders[extension];
    output.push({
      test: new RegExp('\\.' + extension + '$'),
      use: loader
    });
  }

  return output;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWJwYWNrQ29uZmlnL3V0aWxzLmpzIl0sIm5hbWVzIjpbImNzc0xvYWRlcnMiLCJvcHRpb25zIiwiY3NzTG9hZGVyIiwibG9hZGVyIiwic291cmNlTWFwIiwicG9zdGNzc0xvYWRlciIsImdlbmVyYXRlTG9hZGVycyIsImxvYWRlck9wdGlvbnMiLCJsb2FkZXJzIiwidXNlUG9zdENTUyIsInB1c2giLCJPYmplY3QiLCJhc3NpZ24iLCJleHRyYWN0IiwiTWluaUNzc0V4dHJhY3RQbHVnaW4iLCJjb25jYXQiLCJjc3MiLCJwb3N0Y3NzIiwibGVzcyIsInNhc3MiLCJpbmRlbnRlZFN5bnRheCIsInNjc3MiLCJzdHlsdXMiLCJzdHlsIiwic3R5bGVMb2FkZXJzIiwib3V0cHV0IiwiZXhwb3J0cyIsImV4dGVuc2lvbiIsInRlc3QiLCJSZWdFeHAiLCJ1c2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFFTyxTQUFTQSxVQUFULENBQW9CQyxPQUFwQixFQUE2QjtBQUNoQ0EsRUFBQUEsT0FBTyxHQUFHQSxPQUFPLElBQUksRUFBckI7QUFFQSxRQUFNQyxTQUFTLEdBQUc7QUFDZEMsSUFBQUEsTUFBTSxFQUFFLFlBRE07QUFFZEYsSUFBQUEsT0FBTyxFQUFFO0FBQ0xHLE1BQUFBLFNBQVMsRUFBRUgsT0FBTyxDQUFDRztBQURkO0FBRkssR0FBbEI7QUFPQSxRQUFNQyxhQUFhLEdBQUc7QUFDbEJGLElBQUFBLE1BQU0sRUFBRSxnQkFEVTtBQUVsQkYsSUFBQUEsT0FBTyxFQUFFO0FBQ0xHLE1BQUFBLFNBQVMsRUFBRUgsT0FBTyxDQUFDRztBQURkO0FBRlMsR0FBdEIsQ0FWZ0MsQ0FpQmhDOztBQUNBLFdBQVNFLGVBQVQsQ0FBeUJILE1BQXpCLEVBQWlDSSxhQUFqQyxFQUFnRDtBQUM1QyxVQUFNQyxPQUFPLEdBQUcsQ0FBQ04sU0FBRCxDQUFoQjs7QUFFQSxRQUFJRCxPQUFPLENBQUNRLFVBQVosRUFBd0I7QUFDcEJELE1BQUFBLE9BQU8sQ0FBQ0UsSUFBUixDQUFhTCxhQUFiO0FBQ0g7O0FBRUQsUUFBSUYsTUFBSixFQUFZO0FBQ1JLLE1BQUFBLE9BQU8sQ0FBQ0UsSUFBUixDQUFhO0FBQ1RQLFFBQUFBLE1BQU0sRUFBRUEsTUFBTSxHQUFHLFNBRFI7QUFFVEYsUUFBQUEsT0FBTyxFQUFFVSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTCxhQUFsQixFQUFpQztBQUN0Q0gsVUFBQUEsU0FBUyxFQUFFSCxPQUFPLENBQUNHO0FBRG1CLFNBQWpDO0FBRkEsT0FBYjtBQU1IOztBQUVELFdBQU8sQ0FDSEgsT0FBTyxDQUFDWSxPQUFSLEdBQWtCQyw4QkFBcUJYLE1BQXZDLEdBQWdELGtCQUQ3QyxFQUVMWSxNQUZLLENBRUVQLE9BRkYsQ0FBUDtBQUdILEdBckMrQixDQXVDaEM7OztBQUNBLFNBQU87QUFDSFEsSUFBQUEsR0FBRyxFQUFFVixlQUFlLEVBRGpCO0FBRUhXLElBQUFBLE9BQU8sRUFBRVgsZUFBZSxFQUZyQjtBQUdIWSxJQUFBQSxJQUFJLEVBQUVaLGVBQWUsQ0FBQyxNQUFELENBSGxCO0FBSUhhLElBQUFBLElBQUksRUFBRWIsZUFBZSxDQUFDLE1BQUQsRUFBUztBQUFFYyxNQUFBQSxjQUFjLEVBQUU7QUFBbEIsS0FBVCxDQUpsQjtBQUtIQyxJQUFBQSxJQUFJLEVBQUVmLGVBQWUsQ0FBQyxNQUFELENBTGxCO0FBTUhnQixJQUFBQSxNQUFNLEVBQUVoQixlQUFlLENBQUMsUUFBRCxDQU5wQjtBQU9IaUIsSUFBQUEsSUFBSSxFQUFFakIsZUFBZSxDQUFDLFFBQUQ7QUFQbEIsR0FBUDtBQVNIOztBQUVNLFNBQVNrQixZQUFULENBQXNCdkIsT0FBdEIsRUFBK0I7QUFDbEMsUUFBTXdCLE1BQU0sR0FBRyxFQUFmO0FBQ0EsUUFBTWpCLE9BQU8sR0FBR2tCLE9BQU8sQ0FBQzFCLFVBQVIsQ0FBbUJDLE9BQW5CLENBQWhCOztBQUVBLE9BQUssTUFBTTBCLFNBQVgsSUFBd0JuQixPQUF4QixFQUFpQztBQUM3QixVQUFNTCxNQUFNLEdBQUdLLE9BQU8sQ0FBQ21CLFNBQUQsQ0FBdEI7QUFDQUYsSUFBQUEsTUFBTSxDQUFDZixJQUFQLENBQVk7QUFDUmtCLE1BQUFBLElBQUksRUFBRSxJQUFJQyxNQUFKLENBQVcsUUFBUUYsU0FBUixHQUFvQixHQUEvQixDQURFO0FBRVJHLE1BQUFBLEdBQUcsRUFBRTNCO0FBRkcsS0FBWjtBQUlIOztBQUVELFNBQU9zQixNQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWluaUNzc0V4dHJhY3RQbHVnaW4gZnJvbSAnbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4nXG5cbmV4cG9ydCBmdW5jdGlvbiBjc3NMb2FkZXJzKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gICAgY29uc3QgY3NzTG9hZGVyID0ge1xuICAgICAgICBsb2FkZXI6ICdjc3MtbG9hZGVyJyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc291cmNlTWFwOiBvcHRpb25zLnNvdXJjZU1hcCxcbiAgICAgICAgfSxcbiAgICB9XG5cbiAgICBjb25zdCBwb3N0Y3NzTG9hZGVyID0ge1xuICAgICAgICBsb2FkZXI6ICdwb3N0Y3NzLWxvYWRlcicsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNvdXJjZU1hcDogb3B0aW9ucy5zb3VyY2VNYXAsXG4gICAgICAgIH0sXG4gICAgfVxuXG4gICAgLy8gZ2VuZXJhdGUgbG9hZGVyIHN0cmluZyB0byBiZSB1c2VkIHdpdGggZXh0cmFjdCB0ZXh0IHBsdWdpblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlTG9hZGVycyhsb2FkZXIsIGxvYWRlck9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbG9hZGVycyA9IFtjc3NMb2FkZXJdXG5cbiAgICAgICAgaWYgKG9wdGlvbnMudXNlUG9zdENTUykge1xuICAgICAgICAgICAgbG9hZGVycy5wdXNoKHBvc3Rjc3NMb2FkZXIpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9hZGVyKSB7XG4gICAgICAgICAgICBsb2FkZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGxvYWRlcjogbG9hZGVyICsgJy1sb2FkZXInLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGxvYWRlck9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTWFwOiBvcHRpb25zLnNvdXJjZU1hcCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgb3B0aW9ucy5leHRyYWN0ID8gTWluaUNzc0V4dHJhY3RQbHVnaW4ubG9hZGVyIDogJ3Z1ZS1zdHlsZS1sb2FkZXInLFxuICAgICAgICBdLmNvbmNhdChsb2FkZXJzKVxuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vdnVlLWxvYWRlci52dWVqcy5vcmcvZW4vY29uZmlndXJhdGlvbnMvZXh0cmFjdC1jc3MuaHRtbFxuICAgIHJldHVybiB7XG4gICAgICAgIGNzczogZ2VuZXJhdGVMb2FkZXJzKCksXG4gICAgICAgIHBvc3Rjc3M6IGdlbmVyYXRlTG9hZGVycygpLFxuICAgICAgICBsZXNzOiBnZW5lcmF0ZUxvYWRlcnMoJ2xlc3MnKSxcbiAgICAgICAgc2FzczogZ2VuZXJhdGVMb2FkZXJzKCdzYXNzJywgeyBpbmRlbnRlZFN5bnRheDogdHJ1ZSB9KSxcbiAgICAgICAgc2NzczogZ2VuZXJhdGVMb2FkZXJzKCdzYXNzJyksXG4gICAgICAgIHN0eWx1czogZ2VuZXJhdGVMb2FkZXJzKCdzdHlsdXMnKSxcbiAgICAgICAgc3R5bDogZ2VuZXJhdGVMb2FkZXJzKCdzdHlsdXMnKSxcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZUxvYWRlcnMob3B0aW9ucykge1xuICAgIGNvbnN0IG91dHB1dCA9IFtdXG4gICAgY29uc3QgbG9hZGVycyA9IGV4cG9ydHMuY3NzTG9hZGVycyhvcHRpb25zKVxuXG4gICAgZm9yIChjb25zdCBleHRlbnNpb24gaW4gbG9hZGVycykge1xuICAgICAgICBjb25zdCBsb2FkZXIgPSBsb2FkZXJzW2V4dGVuc2lvbl1cbiAgICAgICAgb3V0cHV0LnB1c2goe1xuICAgICAgICAgICAgdGVzdDogbmV3IFJlZ0V4cCgnXFxcXC4nICsgZXh0ZW5zaW9uICsgJyQnKSxcbiAgICAgICAgICAgIHVzZTogbG9hZGVyLFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXRcbn1cbiJdfQ==