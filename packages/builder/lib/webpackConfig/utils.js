"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assetsPath = assetsPath;
exports.cssLoaders = cssLoaders;
exports.cleanWorkspace = cleanWorkspace;

var _path2 = _interopRequireDefault(require("path"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _miniCssExtractPlugin = _interopRequireDefault(require("mini-css-extract-plugin"));

var _core = require("@cranejs/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const packageConfig = require(_path2.default.join(process.cwd(), './package.json'));

function assetsPath(_path) {
  const assetsSubDirectory = process.env.NODE_ENV === 'production' ? _core.config.build.assetsSubDirectory : _core.config.dev.assetsSubDirectory;
  return _path2.default.posix.join(assetsSubDirectory, _path);
}

function cssLoaders(options, module) {
  options = options || {};
  const cssLoader = {
    loader: 'css-loader',
    options: {
      sourceMap: options.sourceMap
    }
  };
  const postcssLoader = {
    loader: 'postcss-loader',
    options: {
      sourceMap: options.sourceMap
    }
  }; // generate loader string to be used with extract text plugin

  function generateLoaders(loader, loaderOptions) {
    const loaders = [cssLoader];

    if (options.usePostCSS) {
      loaders.push(postcssLoader);
    }

    if (loader) {
      loaders.push({
        loader: loader + '-loader',
        options: Object.assign({}, loaderOptions, {
          sourceMap: options.sourceMap
        })
      });
    } // Extract CSS when that option is specified
    // (which is the case during production build)
    // If split media query css, we must extract css.


    return [options.extract ? _miniCssExtractPlugin.default.loader : 'vue-style-loader'].concat(loaders);
  } // https://vue-loader.vuejs.org/en/configurations/extract-css.html


  return {
    css: generateLoaders(),
    postcss: generateLoaders(),
    less: generateLoaders('less'),
    sass: generateLoaders('sass', {
      indentedSyntax: true
    }),
    scss: generateLoaders('sass'),
    stylus: generateLoaders('stylus'),
    styl: generateLoaders('stylus')
  };
} // Generate loaders for standalone style files (outside of .vue)


exports.styleLoaders = function (module, options) {
  const output = [];
  const loaders = exports.cssLoaders(options, module);

  for (const extension in loaders) {
    const loader = loaders[extension];
    output.push({
      test: new RegExp('\\.' + extension + '$'),
      use: loader
    });
  }

  return output;
};

exports.createNotifierCallback = () => {
  const notifier = require('node-notifier');

  return (severity, errors) => {
    if (severity !== 'error') return;
    const error = errors[0];
    const filename = error.file && error.file.split('!').pop();
    notifier.notify({
      title: packageConfig.name,
      message: severity + ': ' + error.name,
      subtitle: filename || ''
    });
  };
};

function cleanWorkspace() {
  try {
    _rimraf.default.sync(_path2.default.join(__dirname, '../dist'));

    console.log('清空 dist 目录');
  } catch (e) {
    console.error(e);
  }

  try {
    _rimraf.default.sync(_path2.default.join(__dirname, '../bundle_analyze'));

    console.log('清空 bundle_analyze 目录');
  } catch (e) {
    console.error(e);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,