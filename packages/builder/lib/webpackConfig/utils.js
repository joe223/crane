"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cssLoaders = cssLoaders;
exports.styleLoaders = styleLoaders;

var _miniCssExtractPlugin = _interopRequireDefault(require("mini-css-extract-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isUrlRequestable(url) {
  // Protocol-relative URLs
  if (/^\/\//.test(url)) {
    return false;
  } // `file:` protocol


  if (/^file:/i.test(url)) {
    return true;
  } // Absolute URLs


  if (/^\/\w+/i.test(url)) {
    return false;
  }

  if (/^[a-z][a-z0-9+.-]*:/i.test(url) && !matchNativeWin32Path.test(url)) {
    return false;
  } // `#` URLs


  if (/^#/.test(url)) {
    return false;
  }

  return true;
}

function cssLoaders(options = {}) {
  // https://github.com/webpack-contrib/css-loader/issues/1157
  // https://github.com/webpack-contrib/css-loader/commit/bc19ddd8779dafbc2a420870a3cb841041ce9c7c
  const cssLoader = {
    loader: 'css-loader',
    options: {
      esModule: false,

      url(url) {
        return isUrlRequestable(url);
      },

      sourceMap: options.sourceMap
    }
  };
  const postcssLoader = {
    loader: 'postcss-loader',
    options: {
      sourceMap: options.sourceMap
    }
  }; // generate loader string to be used with extract text plugin

  function generateLoaders(loader, loaderOptions) {
    const loaders = {
      cssLoader: { ...cssLoader
      }
    };

    if (options.usePostCSS) {
      loaders.postcssLoader = { ...postcssLoader,
        after: 'cssLoader'
      };
    }

    if (loader) {
      loaders[loader] = {
        loader: loader + '-loader',
        options: Object.assign({}, loaderOptions, {
          sourceMap: options.sourceMap
        }),
        after: loaders.postcssLoader ? 'postcssLoader' : 'cssLoader'
      };
    }

    loaders.styleLoader = {
      loader: options.extract ? _miniCssExtractPlugin.default.loader : 'vue-style-loader',
      before: 'cssLoader'
    };
    return loaders;
  } // https://vue-loader.vuejs.org/en/configurations/extract-css.html


  return {
    css: generateLoaders(),
    postcss: generateLoaders(),
    less: generateLoaders('less'),
    sass: generateLoaders('sass', {
      indentedSyntax: true
    }),
    scss: generateLoaders('sass'),
    stylus: generateLoaders('stylus'),
    styl: generateLoaders('stylus')
  };
}

function styleLoaders(options) {
  const output = {};
  const loaders = cssLoaders(options);

  for (const extension in loaders) {
    const loader = loaders[extension];
    output[`style-${extension}`] = {
      test: new RegExp('\\.' + extension + '$'),
      use: loader
    };
  }

  return output;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWJwYWNrQ29uZmlnL3V0aWxzLmpzIl0sIm5hbWVzIjpbImlzVXJsUmVxdWVzdGFibGUiLCJ1cmwiLCJ0ZXN0IiwibWF0Y2hOYXRpdmVXaW4zMlBhdGgiLCJjc3NMb2FkZXJzIiwib3B0aW9ucyIsImNzc0xvYWRlciIsImxvYWRlciIsImVzTW9kdWxlIiwic291cmNlTWFwIiwicG9zdGNzc0xvYWRlciIsImdlbmVyYXRlTG9hZGVycyIsImxvYWRlck9wdGlvbnMiLCJsb2FkZXJzIiwidXNlUG9zdENTUyIsImFmdGVyIiwiT2JqZWN0IiwiYXNzaWduIiwic3R5bGVMb2FkZXIiLCJleHRyYWN0IiwiTWluaUNzc0V4dHJhY3RQbHVnaW4iLCJiZWZvcmUiLCJjc3MiLCJwb3N0Y3NzIiwibGVzcyIsInNhc3MiLCJpbmRlbnRlZFN5bnRheCIsInNjc3MiLCJzdHlsdXMiLCJzdHlsIiwic3R5bGVMb2FkZXJzIiwib3V0cHV0IiwiZXh0ZW5zaW9uIiwiUmVnRXhwIiwidXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBRUEsU0FBU0EsZ0JBQVQsQ0FBMEJDLEdBQTFCLEVBQStCO0FBQzNCO0FBQ0EsTUFBSSxRQUFRQyxJQUFSLENBQWFELEdBQWIsQ0FBSixFQUF1QjtBQUNuQixXQUFPLEtBQVA7QUFDSCxHQUowQixDQU0zQjs7O0FBQ0EsTUFBSSxVQUFVQyxJQUFWLENBQWVELEdBQWYsQ0FBSixFQUF5QjtBQUNyQixXQUFPLElBQVA7QUFDSCxHQVQwQixDQVczQjs7O0FBQ0EsTUFBSSxVQUFVQyxJQUFWLENBQWVELEdBQWYsQ0FBSixFQUF5QjtBQUNyQixXQUFPLEtBQVA7QUFDSDs7QUFFRCxNQUFJLHVCQUF1QkMsSUFBdkIsQ0FBNEJELEdBQTVCLEtBQW9DLENBQUNFLG9CQUFvQixDQUFDRCxJQUFyQixDQUEwQkQsR0FBMUIsQ0FBekMsRUFBeUU7QUFDckUsV0FBTyxLQUFQO0FBQ0gsR0FsQjBCLENBb0IzQjs7O0FBQ0EsTUFBSSxL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cEIsQ0FBTixHQUErQjtBQUMzQjlCLE1BQUFBLElBQUksRUFBRSxJQUFJK0IsTUFBSixDQUFXLFFBQVFELFNBQVIsR0FBb0IsR0FBL0IsQ0FEcUI7QUFFM0JFLE1BQUFBLEdBQUcsRUFBRTNCO0FBRnNCLEtBQS9CO0FBSUg7O0FBRUQsU0FBT3dCLE1BQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNaW5pQ3NzRXh0cmFjdFBsdWdpbiBmcm9tICdtaW5pLWNzcy1leHRyYWN0LXBsdWdpbidcblxuZnVuY3Rpb24gaXNVcmxSZXF1ZXN0YWJsZSh1cmwpIHtcbiAgICAvLyBQcm90b2NvbC1yZWxhdGl2ZSBVUkxzXG4gICAgaWYgKC9eXFwvXFwvLy50ZXN0KHVybCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGBmaWxlOmAgcHJvdG9jb2xcbiAgICBpZiAoL15maWxlOi9pLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBYnNvbHV0ZSBVUkxzXG4gICAgaWYgKC9eXFwvXFx3Ky9pLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoL15bYS16XVthLXowLTkrLi1dKjovaS50ZXN0KHVybCkgJiYgIW1hdGNoTmF0aXZlV2luMzJQYXRoLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gYCNgIFVSTHNcbiAgICBpZiAoL14jLy50ZXN0KHVybCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNzc0xvYWRlcnMob3B0aW9ucyA9IHt9KSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9jc3MtbG9hZGVyL2lzc3Vlcy8xMTU3XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9jc3MtbG9hZGVyL2NvbW1pdC9iYzE5ZGRkODc3OWRhZmJjMmE0MjA4NzBhM2NiODQxMDQxY2U5YzdjXG4gICAgY29uc3QgY3NzTG9hZGVyID0ge1xuICAgICAgICBsb2FkZXI6ICdjc3MtbG9hZGVyJyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgZXNNb2R1bGU6IGZhbHNlLFxuICAgICAgICAgICAgdXJsKHVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1VybFJlcXVlc3RhYmxlKHVybCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc291cmNlTWFwOiBvcHRpb25zLnNvdXJjZU1hcFxuICAgICAgICB9LFxuICAgIH1cbiAgICBjb25zdCBwb3N0Y3NzTG9hZGVyID0ge1xuICAgICAgICBsb2FkZXI6ICdwb3N0Y3NzLWxvYWRlcicsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNvdXJjZU1hcDogb3B0aW9ucy5zb3VyY2VNYXAsXG4gICAgICAgIH0sXG4gICAgfVxuXG4gICAgLy8gZ2VuZXJhdGUgbG9hZGVyIHN0cmluZyB0byBiZSB1c2VkIHdpdGggZXh0cmFjdCB0ZXh0IHBsdWdpblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlTG9hZGVycyhsb2FkZXIsIGxvYWRlck9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbG9hZGVycyA9IHtcbiAgICAgICAgICAgIGNzc0xvYWRlcjoge1xuICAgICAgICAgICAgICAgIC4uLmNzc0xvYWRlcixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnVzZVBvc3RDU1MpIHtcbiAgICAgICAgICAgIGxvYWRlcnMucG9zdGNzc0xvYWRlciA9IHtcbiAgICAgICAgICAgICAgICAuLi5wb3N0Y3NzTG9hZGVyLFxuICAgICAgICAgICAgICAgIGFmdGVyOiAnY3NzTG9hZGVyJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvYWRlcikge1xuICAgICAgICAgICAgbG9hZGVyc1tsb2FkZXJdID0ge1xuICAgICAgICAgICAgICAgIGxvYWRlcjogbG9hZGVyICsgJy1sb2FkZXInLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGxvYWRlck9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTWFwOiBvcHRpb25zLnNvdXJjZU1hcCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBhZnRlcjogbG9hZGVycy5wb3N0Y3NzTG9hZGVyID8gJ3Bvc3Rjc3NMb2FkZXInIDogJ2Nzc0xvYWRlcidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRlcnMuc3R5bGVMb2FkZXIgPSB7XG4gICAgICAgICAgICBsb2FkZXI6IG9wdGlvbnMuZXh0cmFjdCA/IE1pbmlDc3NFeHRyYWN0UGx1Z2luLmxvYWRlciA6ICd2dWUtc3R5bGUtbG9hZGVyJyxcbiAgICAgICAgICAgIGJlZm9yZTogJ2Nzc0xvYWRlcidcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2FkZXJzXG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly92dWUtbG9hZGVyLnZ1ZWpzLm9yZy9lbi9jb25maWd1cmF0aW9ucy9leHRyYWN0LWNzcy5odG1sXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3NzOiBnZW5lcmF0ZUxvYWRlcnMoKSxcbiAgICAgICAgcG9zdGNzczogZ2VuZXJhdGVMb2FkZXJzKCksXG4gICAgICAgIGxlc3M6IGdlbmVyYXRlTG9hZGVycygnbGVzcycpLFxuICAgICAgICBzYXNzOiBnZW5lcmF0ZUxvYWRlcnMoJ3Nhc3MnLCB7IGluZGVudGVkU3ludGF4OiB0cnVlIH0pLFxuICAgICAgICBzY3NzOiBnZW5lcmF0ZUxvYWRlcnMoJ3Nhc3MnKSxcbiAgICAgICAgc3R5bHVzOiBnZW5lcmF0ZUxvYWRlcnMoJ3N0eWx1cycpLFxuICAgICAgICBzdHlsOiBnZW5lcmF0ZUxvYWRlcnMoJ3N0eWx1cycpLFxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlTG9hZGVycyhvcHRpb25zKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0ge31cblxuICAgIGNvbnN0IGxvYWRlcnMgPSBjc3NMb2FkZXJzKG9wdGlvbnMpXG5cbiAgICBmb3IgKGNvbnN0IGV4dGVuc2lvbiBpbiBsb2FkZXJzKSB7XG4gICAgICAgIGNvbnN0IGxvYWRlciA9IGxvYWRlcnNbZXh0ZW5zaW9uXVxuXG4gICAgICAgIG91dHB1dFtgc3R5bGUtJHtleHRlbnNpb259YF0gPSB7XG4gICAgICAgICAgICB0ZXN0OiBuZXcgUmVnRXhwKCdcXFxcLicgKyBleHRlbnNpb24gKyAnJCcpLFxuICAgICAgICAgICAgdXNlOiBsb2FkZXIsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0XG59XG4iXX0=