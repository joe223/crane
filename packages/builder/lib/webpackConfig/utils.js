"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cssLoaders = cssLoaders;
exports.styleLoaders = styleLoaders;
exports.cleanWorkspace = cleanWorkspace;

var _path = _interopRequireDefault(require("path"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _miniCssExtractPlugin = _interopRequireDefault(require("mini-css-extract-plugin"));

var _core = require("@cranejs/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cssLoaders(options) {
  options = options || {};
  const cssLoader = {
    loader: 'css-loader',
    options: {
      sourceMap: options.sourceMap
    }
  };
  const postcssLoader = {
    loader: 'postcss-loader',
    options: {
      sourceMap: options.sourceMap
    }
  }; // generate loader string to be used with extract text plugin

  function generateLoaders(loader, loaderOptions) {
    const loaders = [cssLoader];

    if (options.usePostCSS) {
      loaders.push(postcssLoader);
    }

    if (loader) {
      loaders.push({
        loader: loader + '-loader',
        options: Object.assign({}, loaderOptions, {
          sourceMap: options.sourceMap
        })
      });
    }

    return [options.extract ? _miniCssExtractPlugin.default.loader : 'vue-style-loader'].concat(loaders);
  } // https://vue-loader.vuejs.org/en/configurations/extract-css.html


  return {
    css: generateLoaders(),
    postcss: generateLoaders(),
    less: generateLoaders('less'),
    sass: generateLoaders('sass', {
      indentedSyntax: true
    }),
    scss: generateLoaders('sass'),
    stylus: generateLoaders('stylus'),
    styl: generateLoaders('stylus')
  };
}

function styleLoaders(options) {
  const output = [];
  const loaders = exports.cssLoaders(options);

  for (const extension in loaders) {
    const loader = loaders[extension];
    output.push({
      test: new RegExp('\\.' + extension + '$'),
      use: loader
    });
  }

  return output;
}

function cleanWorkspace() {
  try {
    _rimraf.default.sync(_path.default.join(__dirname, '../dist'));

    console.log('清空 dist 目录');
  } catch (e) {
    console.error(e);
  }

  try {
    _rimraf.default.sync(_path.default.join(__dirname, '../bundle_analyze'));

    console.log('清空 bundle_analyze 目录');
  } catch (e) {
    console.error(e);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWJwYWNrQ29uZmlnL3V0aWxzLmpzIl0sIm5hbWVzIjpbImNzc0xvYWRlcnMiLCJvcHRpb25zIiwiY3NzTG9hZGVyIiwibG9hZGVyIiwic291cmNlTWFwIiwicG9zdGNzc0xvYWRlciIsImdlbmVyYXRlTG9hZGVycyIsImxvYWRlck9wdGlvbnMiLCJsb2FkZXJzIiwidXNlUG9zdENTUyIsInB1c2giLCJPYmplY3QiLCJhc3NpZ24iLCJleHRyYWN0IiwiTWluaUNzc0V4dHJhY3RQbHVnaW4iLCJjb25jYXQiLCJjc3MiLCJwb3N0Y3NzIiwibGVzcyIsInNhc3MiLCJpbmRlbnRlZFN5bnRheCIsInNjc3MiLCJzdHlsdXMiLCJzdHlsIiwic3R5bGVMb2FkZXJzIiwib3V0cHV0IiwiZXhwb3J0cyIsImV4dGVuc2lvbiIsInRlc3QiLCJSZWdFeHAiLCJ1c2UiLCJjbGVhbldvcmtzcGFjZSIsInJpbXJhZiIsInN5bmMiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImNvbnNvbGUiLCJsb2ciLCJlIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBSU8sU0FBU0EsVUFBVCxDQUFxQkMsT0FBckIsRUFBOEI7QUFDakNBLEVBQUFBLE9BQU8sR0FBR0EsT0FBTyxJQUFJLEVBQXJCO0FBRUEsUUFBTUMsU0FBUyxHQUFHO0FBQ2RDLElBQUFBLE1BQU0sRUFBRSxZQURNO0FBRWRGLElBQUFBLE9BQU8sRUFBRTtBQUNMRyxNQUFBQSxTQUFTLEVBQUVILE9BQU8sQ0FBQ0c7QUFEZDtBQUZLLEdBQWxCO0FBT0EsUUFBTUMsYUFBYSxHQUFHO0FBQ2xCRixJQUFBQSxNQUFNLEVBQUUsZ0JBRFU7QUFFbEJGLElBQUFBLE9BQU8sRUFBRTtBQUNMRyxNQUFBQSxTQUFTLEVBQUVILE9BQU8sQ0FBQ0c7QUFEZDtBQUZTLEdBQXRCLENBVmlDLENBaUJqQzs7QUFDQSxXQUFTRSxlQUFULENBQXlCSCxNQUF6QixFQUFpQ0ksYUFBakMsRUFBZ0Q7QUFDNUMsVUFBTUMsT0FBTyxHQUFHLENBQUNOLFNBQUQsQ0FBaEI7O0FBRUEsUUFBSUQsT0FBTyxDQUFDUSxVQUFaLEVBQXdCO0FBQ3BCRCxNQUFBQSxPQUFPLENBQUNFLElBQVIsQ0FBYUwsYUFBYjtBQUNIOztBQUVELFFBQUlGLE1BQUosRUFBWTtBQUNSSyxNQUFBQSxPQUFPLENBQUNFLElBQVIsQ0FBYTtBQUNUUCxRQUFBQSxNQUFNLEVBQUVBLE1BQU0sR0FBRyxTQURSO0FBRVRGLFFBQUFBLE9BQU8sRUFBRVUsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkwsYUFBbEIsRUFBaUM7QUFDdENILFVBQUFBLFNBQVMsRUFBRUgsT0FBTyxDQUFDRztBQURtQixTQUFqQztBQUZBLE9BQWI7QUFNSDs7QUFFRCxXQUFPLENBQ0hILE9BQU8sQ0FBQ1ksT0FBUixHQUNNQyw4QkFBcUJYLE1BRDNCLEdBRU0sa0JBSEgsRUFJTFksTUFKSyxDQUlFUCxPQUpGLENBQVA7QUFLSCxHQXZDZ0MsQ0F5Q2pDOzs7QUFDQSxTQUFPO0FBQ0hRLElBQUFBLEdBQUcsRUFBRVYsZUFBZSxFQURqQjtBQUVIVyxJQUFBQSxPQUFPLEVBQUVYLGVBQWUsRUFGckI7QUFHSFksSUFBQUEsSUFBSSxFQUFFWixlQUFlLENBQUMsTUFBRCxDQUhsQjtBQUlIYSxJQUFBQSxJQUFJLEVBQUViLGVBQWUsQ0FBQyxNQUFELEVBQVM7QUFBRWMsTUFBQUEsY0FBYyxFQUFFO0FBQWxCLEtBQVQsQ0FKbEI7QUFLSEMsSUFBQUEsSUFBSSxFQUFFZixlQUFlLENBQUMsTUFBRCxDQUxsQjtBQU1IZ0IsSUFBQUEsTUFBTSxFQUFFaEIsZUFBZSxDQUFDLFFBQUQsQ0FOcEI7QUFPSGlCLElBQUFBLElBQUksRUFBRWpCLGVBQWUsQ0FBQyxRQUFEO0FBUGxCLEdBQVA7QUFTSDs7QUFFTSxTQUFTa0IsWUFBVCxDQUF3QnZCLE9BQXhCLEVBQWlDO0FBQ3BDLFFBQU13QixNQUFNLEdBQUcsRUFBZjtBQUNBLFFBQU1qQixPQUFPLEdBQUdrQixPQUFPLENBQUMxQixVQUFSLENBQW1CQyxPQUFuQixDQUFoQjs7QUFFQSxPQUFLLE1BQU0wQixTQUFYLElBQXdCbkIsT0FBeEIsRUFBaUM7QUFDN0IsVUFBTUwsTUFBTSxHQUFHSyxPQUFPLENBQUNtQixTQUFELENBQXRCO0FBQ0FGLElBQUFBLE1BQU0sQ0FBQ2YsSUFBUCxDQUFZO0FBQ1JrQixNQUFBQSxJQUFJLEVBQUUsSUFBSUMsTUFBSixDQUFXLFFBQVFGLFNBQVIsR0FBb0IsR0FBL0IsQ0FERTtBQUVSRyxNQUFBQSxHQUFHLEVBQUUzQjtBQUZHLEtBQVo7QUFJSDs7QUFFRCxTQUFPc0IsTUFBUDtBQUNIOztBQUVNLFNBQVNNLGNBQVQsR0FBMkI7QUFDOUIsTUFBSTtBQUNBQyxvQkFBT0MsSUFBUCxDQUFZQyxjQUFLQyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsU0FBckIsQ0FBWjs7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksWUFBWjtBQUNILEdBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDUkYsSUFBQUEsT0FBTyxDQUFDRyxLQUFSLENBQWNELENBQWQ7QUFDSDs7QUFDRCxNQUFJO0FBQ0FQLG9CQUFPQyxJQUFQLENBQVlDLGNBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQixtQkFBckIsQ0FBWjs7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksc0JBQVo7QUFDSCxHQUhELENBR0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1JGLElBQUFBLE9BQU8sQ0FBQ0csS0FBUixDQUFjRCxDQUFkO0FBQ0g7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgcmltcmFmIGZyb20gJ3JpbXJhZidcbmltcG9ydCBNaW5pQ3NzRXh0cmFjdFBsdWdpbiBmcm9tICdtaW5pLWNzcy1leHRyYWN0LXBsdWdpbidcbmltcG9ydCB7XG4gICAgY29uZmlnXG59IGZyb20gJ0BjcmFuZWpzL2NvcmUnXG5cbmV4cG9ydCBmdW5jdGlvbiBjc3NMb2FkZXJzIChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICAgIGNvbnN0IGNzc0xvYWRlciA9IHtcbiAgICAgICAgbG9hZGVyOiAnY3NzLWxvYWRlcicsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNvdXJjZU1hcDogb3B0aW9ucy5zb3VyY2VNYXBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBvc3Rjc3NMb2FkZXIgPSB7XG4gICAgICAgIGxvYWRlcjogJ3Bvc3Rjc3MtbG9hZGVyJyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc291cmNlTWFwOiBvcHRpb25zLnNvdXJjZU1hcFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZ2VuZXJhdGUgbG9hZGVyIHN0cmluZyB0byBiZSB1c2VkIHdpdGggZXh0cmFjdCB0ZXh0IHBsdWdpblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlTG9hZGVycyhsb2FkZXIsIGxvYWRlck9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbG9hZGVycyA9IFtjc3NMb2FkZXJdXG5cbiAgICAgICAgaWYgKG9wdGlvbnMudXNlUG9zdENTUykge1xuICAgICAgICAgICAgbG9hZGVycy5wdXNoKHBvc3Rjc3NMb2FkZXIpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9hZGVyKSB7XG4gICAgICAgICAgICBsb2FkZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGxvYWRlcjogbG9hZGVyICsgJy1sb2FkZXInLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGxvYWRlck9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTWFwOiBvcHRpb25zLnNvdXJjZU1hcFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG9wdGlvbnMuZXh0cmFjdFxuICAgICAgICAgICAgICAgID8gTWluaUNzc0V4dHJhY3RQbHVnaW4ubG9hZGVyXG4gICAgICAgICAgICAgICAgOiAndnVlLXN0eWxlLWxvYWRlcicsXG4gICAgICAgIF0uY29uY2F0KGxvYWRlcnMpXG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly92dWUtbG9hZGVyLnZ1ZWpzLm9yZy9lbi9jb25maWd1cmF0aW9ucy9leHRyYWN0LWNzcy5odG1sXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3NzOiBnZW5lcmF0ZUxvYWRlcnMoKSxcbiAgICAgICAgcG9zdGNzczogZ2VuZXJhdGVMb2FkZXJzKCksXG4gICAgICAgIGxlc3M6IGdlbmVyYXRlTG9hZGVycygnbGVzcycpLFxuICAgICAgICBzYXNzOiBnZW5lcmF0ZUxvYWRlcnMoJ3Nhc3MnLCB7IGluZGVudGVkU3ludGF4OiB0cnVlIH0pLFxuICAgICAgICBzY3NzOiBnZW5lcmF0ZUxvYWRlcnMoJ3Nhc3MnKSxcbiAgICAgICAgc3R5bHVzOiBnZW5lcmF0ZUxvYWRlcnMoJ3N0eWx1cycpLFxuICAgICAgICBzdHlsOiBnZW5lcmF0ZUxvYWRlcnMoJ3N0eWx1cycpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVMb2FkZXJzICAob3B0aW9ucykge1xuICAgIGNvbnN0IG91dHB1dCA9IFtdXG4gICAgY29uc3QgbG9hZGVycyA9IGV4cG9ydHMuY3NzTG9hZGVycyhvcHRpb25zKVxuXG4gICAgZm9yIChjb25zdCBleHRlbnNpb24gaW4gbG9hZGVycykge1xuICAgICAgICBjb25zdCBsb2FkZXIgPSBsb2FkZXJzW2V4dGVuc2lvbl1cbiAgICAgICAgb3V0cHV0LnB1c2goe1xuICAgICAgICAgICAgdGVzdDogbmV3IFJlZ0V4cCgnXFxcXC4nICsgZXh0ZW5zaW9uICsgJyQnKSxcbiAgICAgICAgICAgIHVzZTogbG9hZGVyXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYW5Xb3Jrc3BhY2UgKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJpbXJhZi5zeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9kaXN0JykpXG4gICAgICAgIGNvbnNvbGUubG9nKCfmuIXnqbogZGlzdCDnm67lvZUnKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByaW1yYWYuc3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vYnVuZGxlX2FuYWx5emUnKSlcbiAgICAgICAgY29uc29sZS5sb2coJ+a4heepuiBidW5kbGVfYW5hbHl6ZSDnm67lvZUnKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgIH1cbn1cbiJdfQ==