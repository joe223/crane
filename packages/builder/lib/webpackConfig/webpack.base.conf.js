"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = genBaseConfig;

var _core = require("@cranejs/core");

var _shared = require("@cranejs/shared");

var path = _interopRequireWildcard(require("path"));

var _vueLoader = _interopRequireDefault(require("./vue-loader.conf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const VueLoaderPlugin = require('vue-loader/lib/plugin');

const cwd = process.cwd();

function resolve(dir) {
  return path.join(cwd, dir);
}

const createLintingRule = () => ({
  test: /\.(js|vue|jsx)$/,
  loader: 'eslint-loader',
  enforce: 'pre',
  include: [resolve('modules'), resolve('test')],
  options: {
    formatter: require('eslint-friendly-formatter')
  }
});

const assetsPath = p => path.join('assets', p);

function genBaseConfig(pageConfig) {
  const isVueApp = pageConfig.jsxType === 'react' ? false : true;
  const babelPlugins = [];
  const babelPreset = [];

  _shared.logger.debug('isVueApp' + isVueApp);

  if (isVueApp) {
    babelPreset.push([require.resolve('@vue/babel-preset-jsx'), {
      injectH: false
    }]);
  } else {
    babelPreset.push([require.resolve('@babel/preset-react')]);
  }

  return {
    context: resolve('.'),
    resolve: {
      extensions: ['.js', '.vue', '.json', '.jsx'],
      alias: {
        '@': resolve('modules')
      }
    },
    resolveLoader: {
      modules: [path.resolve(__dirname, '../../node_modules'), path.resolve(cwd, './node_modules')]
    },
    module: {
      rules: [...(_core.config.useEslint ? [createLintingRule()] : []), {
        test: /\.pug$/,
        loader: 'pug-loader'
      }, {
        test: /\.vue$/,
        loader: 'vue-loader',
        options: (0, _vueLoader.default)(pageConfig)
      }, {
        test: /\.(js|jsx)$/,
        loader: 'babel-loader',
        include: [resolve('modules'), resolve('test'), resolve('node_modules/webpack-dev-server/client')],
        options: {
          presets: [['@babel/preset-env', {
            useBuiltIns: 'usage',
            corejs: 3,
            targets: {
              browsers: ['> 1%', 'last 2 versions', 'not ie <= 8']
            }
          }], ...babelPreset],
          plugins: babelPlugins
        }
      }, {
        test: /\.(png|jpe?g|gif)(\?.*)?$/,
        loader: 'url-loader',
        options: {
          limit: 10000,
          esModule: false,
          name: assetsPath('img/[name].[hash:7].[ext]')
        }
      }, {
        test: /\.(svg)(\?.*)?$/,
        loader: 'file-loader',
        options: {
          esModule: false,
          name: assetsPath('img/[name].[hash:7].[ext]')
        }
      }, {
        test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,
        loader: 'url-loader',
        options: {
          limit: 10000,
          name: assetsPath('media/[name].[hash:7].[ext]')
        }
      }, {
        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
        loader: 'url-loader',
        options: {
          limit: 10000,
          esModule: false,
          name: assetsPath('fonts/[name].[hash:7].[ext]')
        }
      }]
    },
    plugins: [new VueLoaderPlugin()],
    node: {
      global: false,
      __filename: false,
      __dirname: false
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,