"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = genBaseWebpackConfig;

var _shared = require("@cranejs/shared");

var path = _interopRequireWildcard(require("path"));

var _webpackChain = _interopRequireDefault(require("webpack-chain"));

var _vueLoader = _interopRequireDefault(require("./vue-loader.conf"));

var _Logs = _interopRequireDefault(require("./plugins/Logs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const VueLoaderPlugin = require('vue-loader/lib/plugin');

const cwd = process.cwd();

function resolve(dir) {
  return path.join(cwd, dir);
}

const createLintingRule = () => ({
  test: /\.(js|vue|jsx)$/,
  loader: 'eslint-loader',
  enforce: 'pre',
  include: [resolve('modules'), resolve('test')],
  options: {
    formatter: require('eslint-friendly-formatter')
  }
});

const assetsPath = p => path.join('assets', p);

function genBaseWebpackConfig(pageConfig, moduleName, clientEnv, buildType) {
  const webpackConfig = new _webpackChain.default();
  webpackConfig.merge({
    context: resolve('.'),
    resolve: {
      extensions: ['.js', '.vue', '.json', '.jsx'],
      alias: {
        '@': resolve('modules')
      }
    },
    resolveLoader: {
      modules: [path.resolve(__dirname, '../../node_modules'), path.resolve(cwd, './node_modules')]
    },
    module: {
      rule: {
        pug: {
          test: /\.pug$/,
          use: {
            pug: {
              loader: 'pug-loader'
            }
          }
        },
        vue: {
          test: /\.vue$/,
          use: {
            vue: {
              loader: 'vue-loader',
              options: (0, _vueLoader.default)(pageConfig)
            }
          }
        },
        js: {
          test: /\.(m?js|jsx)$/,
          include: [resolve('modules'), resolve('test'), resolve('__test__'), require.resolve('webpack-dev-server/client')],
          use: {
            babel: {
              loader: 'babel-loader',
              options: {
                presets: [['@babel/preset-env', {
                  useBuiltIns: 'usage',
                  corejs: 3,
                  targets: {
                    browsers: ['> 1%', 'last 2 versions', 'not ie <= 8']
                  }
                }]]
              }
            }
          }
        },
        image: {
          test: /\.(png|jpe?g|gif|svg|apng)(\?.*)?$/,
          use: {
            url: {
              loader: 'url-loader',
              options: {
                limit: 10000,
                esModule: false,
                name: assetsPath('img/[name].[hash:7].[ext]')
              }
            }
          }
        },
        media: {
          test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,
          use: {
            url: {
              loader: 'url-loader',
              options: {
                limit: 10000,
                name: assetsPath('media/[name].[hash:7].[ext]')
              }
            }
          }
        },
        font: {
          test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
          use: {
            url: {
              loader: 'url-loader',
              options: {
                limit: 10000,
                esModule: false,
                name: assetsPath('fonts/[name].[hash:7].[ext]')
              }
            }
          }
        }
      }
    },
    plugin: {
      VueLoaderPlugin: {
        plugin: VueLoaderPlugin
      },
      WebpackLogs: {
        plugin: _Logs.default,
        args: [{
          name: moduleName,
          clear: true
        }]
      }
    },
    node: {
      global: false,
      __filename: false,
      __dirname: false
    }
  });
  return webpackConfig;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,