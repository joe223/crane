"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateBuildConfig = validateBuildConfig;
exports.resolvePath = resolvePath;
exports.createBuilderConfig = createBuilderConfig;
exports.builder = builder;

var _path = _interopRequireDefault(require("path"));

var _shared = require("@cranejs/shared");

var _miniCssExtractPlugin = _interopRequireDefault(require("mini-css-extract-plugin"));

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackDevServer = _interopRequireDefault(require("webpack-dev-server"));

var _webpackMerge = _interopRequireDefault(require("webpack-merge"));

var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cwd = process.cwd();

function loadPlugin(name) {
  return require(require.resolve(name, {
    paths: [cwd, __dirname, _path.default.resolve(__dirname, '../')]
  })).default;
}

function validateBuildConfig(buildConfig, moduleName) {
  if (!buildConfig.entry && (!buildConfig.entries || buildConfig.entries.length === 0)) {
    _shared.logger.error(`module [${moduleName}] required a entry`);

    process.exit(1);
  }
}

function resolvePath(filePath) {
  return _path.default.isAbsolute(filePath) ? filePath : _path.default.join(cwd, './modules', filePath);
}

function createBuilderConfig(pageConfig, moduleName, clientEnv, buildType) {
  const configBuilder = require(`./webpackConfig/webpack.${buildType}.conf`).default(pageConfig);

  const baseOutput = pageConfig.output || moduleName;
  validateBuildConfig(pageConfig, moduleName);

  _shared.config.plugins.forEach(plugin => {
    let [resolvedPlugin, options] = typeof plugin === 'string' // string
    ? [loadPlugin(plugin)] // [plugin, option]
    : Array.isArray(plugin) ? typeof plugin[0] === 'function' ? [plugin[0], plugin[1]] : [loadPlugin(plugin[0]), plugin[1]] : // function
    [plugin];
    resolvedPlugin({
      configBuilder,
      pageConfig,
      moduleName,
      clientEnv,
      buildType
    }, options);
  });

  const baseConfig = configBuilder.toConfig();
  const extendConfig = {
    entry: {},
    plugins: []
  }; // Single entry file

  if (pageConfig.entry) {
    const entry = pageConfig;
    const defaultEntryName = 'index';
    entry.templateParameters = {
      WEB_ENV: clientEnv,
      ...entry.templateParameters
    };
    extendConfig.entry[defaultEntryName] = resolvePath(entry.entry);
    extendConfig.plugins.push(genHtmlWebpackPluginConfig(buildType, entry, defaultEntryName, 'index.html')); // Multiple entry file
  } else {
    Object.keys(pageConfig.entries).forEach(entryName => {
      const entry = pageConfig.entries[entryName];
      entry.templateParameters = {
        WEB_ENV: clientEnv,
        ...entry.templateParameters
      };
      extendConfig.entry[entryName] = resolvePath(entry.entry);
      extendConfig.plugins.push(genHtmlWebpackPluginConfig(buildType, entry, entryName, entry.output || _path.default.join(entryName, 'index.html')));
    });
  }

  if (buildType === _shared.BuildType.prod) {
    extendConfig.plugins.push(new _miniCssExtractPlugin.default({
      // Options similar to the same options in webpackOptions.output
      // both options are optional
      filename: '[name].[chunkhash].css',
      chunkFilename: '[id].[chunkhash].css'
    }));
  } // Set public static assets
  // copy custom static assets


  if (pageConfig.static) {
    const staticAssets = [{
      from: resolvePath(pageConfig.static),
      to: _shared.config.assetsSubDirectory,
      globOptions: {
        dot: false
      }
    }];
    extendConfig.plugins.push(new _copyWebpackPlugin.default({
      patterns: staticAssets,
      options: {
        concurrency: 100
      }
    }));
  }

  const webpackConfig = (0, _webpackMerge.default)(baseConfig, {
    output: {
      path: _path.default.join(_shared.config.assetsRoot, baseOutput),
      filename: '[name].[chunkhash].js',
      publicPath: _path.default.join(_path.default.sep, baseOutput, _path.default.sep)
    },
    plugins: [new _webpack.default.EnvironmentPlugin(clientEnv)]
  }, extendConfig, pageConfig.webpack || {});
  return webpackConfig;
}

function builder(builderConfig, dev = false) {
  if (dev) {
    const options = _shared.config.devServer;
    const server = new _webpackDevServer.default((0, _webpack.default)(builderConfig), options);
    server.listen(options.port, 'localhost', function (err) {
      if (err) {
        console.log(err);
      }

      console.log('WebpackDevServer listening at localhost:', options.port);
    });
  } else {
    (0, _webpack.default)(builderConfig, (err, stats) => {
      // https://webpack.js.org/api/node/#error-handling
      if (err) {
        console.error(err.stack || err);

        if (err.details) {
          console.error(err.details);
        }

        return;
      }

      const info = stats.toJson();

      if (stats.hasErrors()) {
        console.error(info.errors);
      }

      if (stats.hasWarnings()) {
        console.warn(info.warnings);
      }
    });
  }
}
/**
 * The default for options.templateParameter
 * Generate the template parameters
 */


function genTemplateParametersGenerator(entry) {
  return function templateParametersGenerator(compilation, assets, options) {
    // Try to use absolute path while loading stylesheet
    if (assets.extracted && assets.extracted.css) {
      assets.extracted.css.forEach(css => {
        if (!_path.default.isAbsolute(css.file) && css.file.indexOf(assets.publicPath) < 0) {
          css.file = _path.default.join(assets.publicPath, css.file);
        }
      });
    }

    return {
      title: entry.title || entry.templateParameters.title,
      ...entry.templateParameters,
      compilation,
      webpackConfig: entry.options,
      htmlWebpackPlugin: {
        files: assets,
        options: options
      }
    };
  };
}
/**
 * Factory function for generating HTMLWebpackPlugin instance
 * @param {string} buildType 'dev' | 'prod'
 * @param {{
 *  title,
 *  entry,
 *  output,
 *  template?,
 *  templateParameters?}} entry
 * @param entryName
 * @param {string} htmlFilename
 * @returns {HtmlWebpackPlugin}
 */


function genHtmlWebpackPluginConfig(buildType, entry, entryName, filename = 'index.html') {
  const template = entry.template ? resolvePath(entry.template) : _shared.config.defaultTemplate;

  if (buildType === _shared.BuildType.dev) {
    return new _htmlWebpackPlugin.default({
      filename,
      template,
      inject: true,
      chunks: ['vendors', entryName],
      title: entry.title || entry.templateParameters.title,
      templateParameters: genTemplateParametersGenerator(entry)
    });
  } else {
    return new _htmlWebpackPlugin.default({
      filename,
      template,
      inject: true,
      chunks: ['vendors', entryName],
      title: entry.title || entry.templateParameters.title,
      templateParameters: genTemplateParametersGenerator(entry),
      minify: {
        removeComments: true,
        collapseWhitespace: true,
        removeAttributeQuotes: true // more options:
        // https://github.com/kangax/html-minifier#options-quick-reference

      },
      // necessary to consistently work with multiple chunks via CommonsChunkPlugin
      chunksSortMode: 'auto'
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,