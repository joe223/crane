"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateBuildConfig = validateBuildConfig;
exports.resolvePath = resolvePath;
exports.createBuilderConfig = createBuilderConfig;
exports.builder = builder;

var _path = _interopRequireDefault(require("path"));

var _core = require("@cranejs/core");

var _shared = require("@cranejs/shared");

var _miniCssExtractPlugin = _interopRequireDefault(require("mini-css-extract-plugin"));

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackDevServer = _interopRequireDefault(require("webpack-dev-server"));

var _webpackMerge = _interopRequireDefault(require("webpack-merge"));

var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cwd = process.cwd();

function validateBuildConfig(buildConfig, moduleName) {
  if (!buildConfig.entry && (!buildConfig.entries || buildConfig.entries.length === 0)) {
    _shared.logger.error(`module [${moduleName}] required a entry`);

    process.exit(1);
  }
}

function resolvePath(filePath) {
  return _path.default.isAbsolute(filePath) ? filePath : _path.default.join(cwd, './modules', filePath);
}

function createBuilderConfig(buildConfig, moduleName, clientEnv, buildType) {
  validateBuildConfig(buildConfig, moduleName);
  const conf = {
    entry: {},
    plugins: []
  };

  const configBuilder = require(`./webpackConfig/webpack.${buildType}.conf`);

  buildConfig.output = buildConfig.output || moduleName; // Single entry file

  if (buildConfig.entry) {
    const defaultEntryName = 'index';
    const entry = buildConfig;
    entry.templateParameters = {
      WEB_ENV: clientEnv,
      ...entry.templateParameters
    };
    conf.entry[defaultEntryName] = resolvePath(entry.entry);
    conf.plugins.push(genHtmlWebpackPluginConfig(buildType, entry, defaultEntryName, 'index.html')); // Multiple entry file
  } else {
    Object.keys(buildConfig.entries).forEach(entryName => {
      const entry = buildConfig.entries[entryName];
      entry.templateParameters = {
        WEB_ENV: clientEnv,
        ...entry.templateParameters
      };
      conf.entry[entryName] = resolvePath(entry.entry);
      conf.plugins.push(genHtmlWebpackPluginConfig(buildType, entry, entryName, entry.output || `${entryName}/index.html`));
    });
  }

  if (buildType === _shared.BuildType.prod) {
    conf.plugins.push(new _miniCssExtractPlugin.default({
      // Options similar to the same options in webpackOptions.output
      // both options are optional
      filename: buildType === _shared.BuildType.prod ? '[name].[chunkhash].css' : '[name].css',
      chunkFilename: buildType === _shared.BuildType.prod ? '[id].[chunkhash].css' : '[id].css'
    }));
  } // conf.plugins.push(...customPlugins.pluginsList)
  // Set public static assets
  // copy custom static assets


  if (buildConfig.static) {
    const staticAssets = [{
      from: resolvePath(buildConfig.static),
      to: _core.config.assetsSubDirectory,
      globOptions: {
        dot: false
      }
    }];
    conf.plugins.push(new _copyWebpackPlugin.default({
      patterns: staticAssets,
      options: {
        concurrency: 100
      }
    }));
  }

  const webpackConfig = (0, _webpackMerge.default)(configBuilder(buildConfig), {
    output: {
      path: _path.default.join(_core.config.assetsRoot, buildConfig.output),
      filename: '[name].[chunkhash].js',
      publicPath: _path.default.join(_path.default.sep, buildConfig.output, _path.default.sep)
    },
    plugins: [new _webpack.default.EnvironmentPlugin(clientEnv)]
  }, conf, buildConfig.webpack || {});
  return webpackConfig;
}

function builder(builderConfig, dev = false) {
  _shared.logger.debug(builderConfig);

  if (dev) {
    const options = _core.config.devServer;
    const server = new _webpackDevServer.default((0, _webpack.default)(builderConfig), options);
    server.listen(options.port, 'localhost', function (err) {
      if (err) {
        console.log(err);
      }

      console.log('WebpackDevServer listening at localhost:', options.port);
    });
  } else {
    const compiler = (0, _webpack.default)(builderConfig);
    compiler.run((err, stats) => console.log(err));
  }
}
/**
 * The default for options.templateParameter
 * Generate the template parameters
 */


function genTemplateParametersGenerator(entry) {
  return function templateParametersGenerator(compilation, assets, options) {
    // Try to use absolute path while loading stylesheet
    if (assets.extracted && assets.extracted.css) {
      assets.extracted.css.forEach(css => {
        if (!_path.default.isAbsolute(css.file) && css.file.indexOf(assets.publicPath) < 0) {
          css.file = _path.default.join(assets.publicPath, css.file);
        }
      });
    }

    return {
      title: entry.title || entry.templateParameters.title,
      ...entry.templateParameters,
      compilation,
      webpackConfig: entry.options,
      htmlWebpackPlugin: {
        files: assets,
        options: options
      }
    };
  };
}
/**
 * Factory function for generating HTMLWebpackPlugin instance
 * @param {string} buildType 'dev' | 'prod'
 * @param {{
 *  title,
 *  entry,
 *  output,
 *  template?,
 *  templateParameters?}} entry
 * @param entryName
 * @param {string} htmlFilename
 * @returns {HtmlWebpackPlugin}
 */


function genHtmlWebpackPluginConfig(buildType, entry, entryName, filename = 'index.html') {
  const template = entry.template ? resolvePath(entry.template) : _path.default.join(__dirname, '../template/index.pug');

  if (buildType === _shared.BuildType.dev) {
    return new _htmlWebpackPlugin.default({
      filename,
      template,
      inject: true,
      chunks: ['vendors', entryName],
      title: entry.title || entry.templateParameters.title,
      templateParameters: genTemplateParametersGenerator(entry)
    });
  } else {
    return new _htmlWebpackPlugin.default({
      filename,
      template,
      inject: true,
      chunks: ['vendors', entryName],
      title: entry.title || entry.templateParameters.title,
      templateParameters: genTemplateParametersGenerator(entry),
      minify: {
        removeComments: true,
        collapseWhitespace: true,
        removeAttributeQuotes: true // more options:
        // https://github.com/kangax/html-minifier#options-quick-reference

      },
      // necessary to consistently work with multiple chunks via CommonsChunkPlugin
      chunksSortMode: 'auto'
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,