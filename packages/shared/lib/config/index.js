"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = void 0;

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cwd = process.cwd();
const defaultConfig = {
  useEslint: true,
  devtool: 'source-map',
  productionGzip: false,
  productionGzipExtensions: ['js', 'css'],
  assetsRoot: _path.default.resolve(cwd, './dist'),
  assetsSubDirectory: 'static',
  defaultTemplate: _path.default.join(cwd, './templates/index.pug'),
  // https://webpack.js.org/configuration/dev-server/
  devServer: {
    hot: true,
    port: process.env.PORT && Number(process.env.PORT),
    open: true,
    overlay: true
  },
  dev: {
    // Use Eslint Loader?
    // If true, your code will be linted during bundling and
    // linting errors and warnings will be shown in the console.
    useEslint: process.env.NODE_ENV !== 'production',
    // If true, eslint errors and warnings will also be shown in the error overlay
    // in the browser.
    showEslintErrorsInOverlay: false,

    /**
     * Source Maps
     */
    // https://webpack.js.org/configuration/devtool/#development
    devtool: 'inline-cheap-module-source-map',
    cssSourceMap: true
  },
  build: {
    /**
     * Source Maps
     */
    productionSourceMap: process.env.CRANE_BUILD_MODE !== 'production',
    // https://webpack.js.org/configuration/devtool/#production
    devtool: 'source-map',
    // Gzip off by default as many popular static hosts such as
    // Surge or Netlify already gzip all static assets for you.
    // Before setting to `true`, make sure to:
    // npm install --save-dev compression-webpack-plugin
    productionGzip: false,
    productionGzipExtensions: ['js', 'css'],
    // Run the build command with an extra argument to
    // View the bundle analyzer report after build finishes:
    // `npm run build --report`
    // Set to `true` or `false` to always turn it on or off
    bundleAnalyzerReport: process.env.npm_config_report
  },
  pages: [],
  plugins: []
};
const config = (0, _deepmerge.default)(defaultConfig, require(_path.default.resolve(cwd, 'crane.config.js')));
exports.config = config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvaW5kZXguanMiXSwibmFtZXMiOlsiY3dkIiwicHJvY2VzcyIsImRlZmF1bHRDb25maWciLCJ1c2VFc2xpbnQiLCJkZXZ0b29sIiwicHJvZHVjdGlvbkd6aXAiLCJwcm9kdWN0aW9uR3ppcEV4dGVuc2lvbnMiLCJhc3NldHNSb290IiwicGF0aCIsInJlc29sdmUiLCJhc3NldHNTdWJEaXJlY3RvcnkiLCJkZWZhdWx0VGVtcGxhdGUiLCJqb2luIiwiZGV2U2VydmVyIiwiaG90IiwicG9ydCIsImVudiIsIlBPUlQiLCJOdW1iZXIiLCJvcGVuIiwib3ZlcmxheSIsImRldiIsIk5PREVfRU5WIiwic2hvd0VzbGludEVycm9yc0luT3ZlcmxheSIsImNzc1NvdXJjZU1hcCIsImJ1aWxkIiwicHJvZHVjdGlvblNvdXJjZU1hcCIsIkNSQU5FX0JVSUxEX01PREUiLCJidW5kbGVBbmFseXplclJlcG9ydCIsIm5wbV9jb25maWdfcmVwb3J0IiwicGFnZXMiLCJwbHVnaW5zIiwiY29uZmlnIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsR0FBRyxHQUFHQyxPQUFPLENBQUNELEdBQVIsRUFBWjtBQUNBLE1BQU1FLGFBQWEsR0FBRztBQUNsQkMsRUFBQUEsU0FBUyxFQUFFLElBRE87QUFFbEJDLEVBQUFBLE9BQU8sRUFBRSxZQUZTO0FBR2xCQyxFQUFBQSxjQUFjLEVBQUUsS0FIRTtBQUlsQkMsRUFBQUEsd0JBQXdCLEVBQUUsQ0FBQyxJQUFELEVBQU8sS0FBUCxDQUpSO0FBS2xCQyxFQUFBQSxVQUFVLEVBQUVDLGNBQUtDLE9BQUwsQ0FBYVQsR0FBYixFQUFrQixRQUFsQixDQUxNO0FBTWxCVSxFQUFBQSxrQkFBa0IsRUFBRSxRQU5GO0FBT2xCQyxFQUFBQSxlQUFlLEVBQUVILGNBQUtJLElBQUwsQ0FBVVosR0FBVixFQUFlLHVCQUFmLENBUEM7QUFTbEI7QUFDQWEsRUFBQUEsU0FBUyxFQUFFO0FBQ1BDLElBQUFBLEdBQUcsRUFBRSxJQURFO0FBRVBDLElBQUFBLElBQUksRUFBRWQsT0FBTyxDQUFDZSxHQUFSLENBQVlDLElBQVosSUFBb0JDLE1BQU0sQ0FBQ2pCLE9BQU8sQ0FBQ2UsR0FBUixDQUFZQyxJQUFiLENBRnpCO0FBR1BFLElBQUFBLElBQUksRUFBRSxJQUhDO0FBSVBDLElBQUFBLE9BQU8sRUFBRTtBQUpGLEdBVk87QUFpQmxCQyxFQUFBQSxHQUFHLEVBQUU7QUFDRDtBQUNBO0FBQ0E7QUFDQWxCLElBQUFBLFNBQVMsRUFBRUYsT0FBTyxDQUFDZSxHQUFSLENBQVlNLFFBQVosS0FBeUIsWUFKbkM7QUFLRDtBQUNBO0FBQ0FDLElBQUFBLHlCQUF5QixFQUFFLEtBUDFCOztBQVNEO0FBQ1I7QUFDQTtBQUVRO0FBQ0FuQixJQUFBQSxPQUFPLEVBQUUsZ0NBZFI7QUFnQkRvQixJQUFBQSxZQUFZLEVBQUU7QUFoQmIsR0FqQmE7QUFvQ2xCQyxFQUFBQSxLQUFLLEVBQUU7QUFDSDtBQUNSO0FBQ0E7QUFDUUMsSUFBQUEsbUJBQW1CLEVBQUV6QixPQUFPLENBQUNlLEdBQVIsQ0FBWVcsZ0JBQVosS0FBaUMsWUFKbkQ7QUFLSDtBQUNBdkIsSUFBQUEsT0FBTyxFQUFFLFlBTk47QUFRSDtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxJQUFBQSxjQUFjLEVBQUUsS0FaYjtBQWFIQyxJQUFBQSx3QkFBd0IsRUFBRSxDQUFDLElBQUQsRUFBTyxLQUFQLENBYnZCO0FBZUg7QUFDQTtBQUNBO0FBQ0E7QUFDQXNCLElBQUFBLG9CQUFvQixFQUFFM0IsT0FBTyxDQUFDZSxHQUFSLENBQVlhO0FBbkIvQixHQXBDVztBQTBEbEJDLEVBQUFBLEtBQUssRUFBRSxFQTFEVztBQTREbEJDLEVBQUFBLE9BQU8sRUFBRTtBQTVEUyxDQUF0QjtBQThEQSxNQUFNQyxNQUFNLEdBQUcsd0JBQ1g5QixhQURXLEVBRVgrQixPQUFPLENBQUN6QixjQUFLQyxPQUFMLENBQWFULEdBQWIsRUFBa0IsaUJBQWxCLENBQUQsQ0FGSSxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuXG5jb25zdCBjd2QgPSBwcm9jZXNzLmN3ZCgpXG5jb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICAgIHVzZUVzbGludDogdHJ1ZSxcbiAgICBkZXZ0b29sOiAnc291cmNlLW1hcCcsXG4gICAgcHJvZHVjdGlvbkd6aXA6IGZhbHNlLFxuICAgIHByb2R1Y3Rpb25HemlwRXh0ZW5zaW9uczogWydqcycsICdjc3MnXSxcbiAgICBhc3NldHNSb290OiBwYXRoLnJlc29sdmUoY3dkLCAnLi9kaXN0JyksXG4gICAgYXNzZXRzU3ViRGlyZWN0b3J5OiAnc3RhdGljJyxcbiAgICBkZWZhdWx0VGVtcGxhdGU6IHBhdGguam9pbihjd2QsICcuL3RlbXBsYXRlcy9pbmRleC5wdWcnKSxcblxuICAgIC8vIGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9kZXYtc2VydmVyL1xuICAgIGRldlNlcnZlcjoge1xuICAgICAgICBob3Q6IHRydWUsXG4gICAgICAgIHBvcnQ6IHByb2Nlc3MuZW52LlBPUlQgJiYgTnVtYmVyKHByb2Nlc3MuZW52LlBPUlQpLFxuICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICBvdmVybGF5OiB0cnVlLFxuICAgIH0sXG5cbiAgICBkZXY6IHtcbiAgICAgICAgLy8gVXNlIEVzbGludCBMb2FkZXI/XG4gICAgICAgIC8vIElmIHRydWUsIHlvdXIgY29kZSB3aWxsIGJlIGxpbnRlZCBkdXJpbmcgYnVuZGxpbmcgYW5kXG4gICAgICAgIC8vIGxpbnRpbmcgZXJyb3JzIGFuZCB3YXJuaW5ncyB3aWxsIGJlIHNob3duIGluIHRoZSBjb25zb2xlLlxuICAgICAgICB1c2VFc2xpbnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG4gICAgICAgIC8vIElmIHRydWUsIGVzbGludCBlcnJvcnMgYW5kIHdhcm5pbmdzIHdpbGwgYWxzbyBiZSBzaG93biBpbiB0aGUgZXJyb3Igb3ZlcmxheVxuICAgICAgICAvLyBpbiB0aGUgYnJvd3Nlci5cbiAgICAgICAgc2hvd0VzbGludEVycm9yc0luT3ZlcmxheTogZmFsc2UsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNvdXJjZSBNYXBzXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8vIGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9kZXZ0b29sLyNkZXZlbG9wbWVudFxuICAgICAgICBkZXZ0b29sOiAnaW5saW5lLWNoZWFwLW1vZHVsZS1zb3VyY2UtbWFwJyxcblxuICAgICAgICBjc3NTb3VyY2VNYXA6IHRydWUsXG4gICAgfSxcblxuICAgIGJ1aWxkOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTb3VyY2UgTWFwc1xuICAgICAgICAgKi9cbiAgICAgICAgcHJvZHVjdGlvblNvdXJjZU1hcDogcHJvY2Vzcy5lbnYuQ1JBTkVfQlVJTERfTU9ERSAhPT0gJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAvLyBodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vZGV2dG9vbC8jcHJvZHVjdGlvblxuICAgICAgICBkZXZ0b29sOiAnc291cmNlLW1hcCcsXG5cbiAgICAgICAgLy8gR3ppcCBvZmYgYnkgZGVmYXVsdCBhcyBtYW55IHBvcHVsYXIgc3RhdGljIGhvc3RzIHN1Y2ggYXNcbiAgICAgICAgLy8gU3VyZ2Ugb3IgTmV0bGlmeSBhbHJlYWR5IGd6aXAgYWxsIHN0YXRpYyBhc3NldHMgZm9yIHlvdS5cbiAgICAgICAgLy8gQmVmb3JlIHNldHRpbmcgdG8gYHRydWVgLCBtYWtlIHN1cmUgdG86XG4gICAgICAgIC8vIG5wbSBpbnN0YWxsIC0tc2F2ZS1kZXYgY29tcHJlc3Npb24td2VicGFjay1wbHVnaW5cbiAgICAgICAgcHJvZHVjdGlvbkd6aXA6IGZhbHNlLFxuICAgICAgICBwcm9kdWN0aW9uR3ppcEV4dGVuc2lvbnM6IFsnanMnLCAnY3NzJ10sXG5cbiAgICAgICAgLy8gUnVuIHRoZSBidWlsZCBjb21tYW5kIHdpdGggYW4gZXh0cmEgYXJndW1lbnQgdG9cbiAgICAgICAgLy8gVmlldyB0aGUgYnVuZGxlIGFuYWx5emVyIHJlcG9ydCBhZnRlciBidWlsZCBmaW5pc2hlczpcbiAgICAgICAgLy8gYG5wbSBydW4gYnVpbGQgLS1yZXBvcnRgXG4gICAgICAgIC8vIFNldCB0byBgdHJ1ZWAgb3IgYGZhbHNlYCB0byBhbHdheXMgdHVybiBpdCBvbiBvciBvZmZcbiAgICAgICAgYnVuZGxlQW5hbHl6ZXJSZXBvcnQ6IHByb2Nlc3MuZW52Lm5wbV9jb25maWdfcmVwb3J0LFxuICAgIH0sXG5cbiAgICBwYWdlczogW10sXG5cbiAgICBwbHVnaW5zOiBbXVxufVxuY29uc3QgY29uZmlnID0gZGVlcG1lcmdlKFxuICAgIGRlZmF1bHRDb25maWcsXG4gICAgcmVxdWlyZShwYXRoLnJlc29sdmUoY3dkLCAnY3JhbmUuY29uZmlnLmpzJykpXG4pXG5cbmV4cG9ydCB7IGNvbmZpZyB9XG4iXX0=