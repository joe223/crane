"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = void 0;

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cwd = process.cwd();
const defaultConfig = {
  useEslint: true,
  devtool: 'source-map',
  productionGzip: false,
  productionGzipExtensions: ['js', 'css'],
  assetsRoot: _path.default.resolve(cwd, './dist'),
  assetsSubDirectory: 'static',
  defaultTemplate: _path.default.join(cwd, './templates/index.pug'),
  // https://webpack.js.org/configuration/dev-server/
  devServer: {
    hot: true,
    port: 8080,
    open: true,
    overlay: true
  },
  dev: {
    host: 'localhost',
    // Paths
    assetsSubDirectory: 'static',
    // Use Eslint Loader?
    // If true, your code will be linted during bundling and
    // linting errors and warnings will be shown in the console.
    useEslint: process.env.NODE_ENV !== 'production',
    // If true, eslint errors and warnings will also be shown in the error overlay
    // in the browser.
    showEslintErrorsInOverlay: false,

    /**
     * Source Maps
     */
    // https://webpack.js.org/configuration/devtool/#development
    devtool: 'inline-cheap-module-source-map',
    // If you have problems debugging vue-files in devtools,
    // set this to false - it *may* help
    // https://vue-loader.vuejs.org/en/options.html#cachebusting
    cacheBusting: true,
    cssSourceMap: true
  },
  build: {
    // Paths
    assetsRoot: _path.default.resolve(cwd, './dist'),
    assetsSubDirectory: 'static',

    /**
     * Source Maps
     */
    productionSourceMap: process.env.CRANE_BUILD_MODE !== 'production',
    // https://webpack.js.org/configuration/devtool/#production
    devtool: 'source-map',
    // Gzip off by default as many popular static hosts such as
    // Surge or Netlify already gzip all static assets for you.
    // Before setting to `true`, make sure to:
    // npm install --save-dev compression-webpack-plugin
    productionGzip: false,
    productionGzipExtensions: ['js', 'css'],
    // Run the build command with an extra argument to
    // View the bundle analyzer report after build finishes:
    // `npm run build --report`
    // Set to `true` or `false` to always turn it on or off
    bundleAnalyzerReport: process.env.npm_config_report
  },
  pages: []
};
const config = (0, _deepmerge.default)(defaultConfig, require(_path.default.resolve(cwd, 'crane.config.js')));
exports.config = config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvaW5kZXguanMiXSwibmFtZXMiOlsiY3dkIiwicHJvY2VzcyIsImRlZmF1bHRDb25maWciLCJ1c2VFc2xpbnQiLCJkZXZ0b29sIiwicHJvZHVjdGlvbkd6aXAiLCJwcm9kdWN0aW9uR3ppcEV4dGVuc2lvbnMiLCJhc3NldHNSb290IiwicGF0aCIsInJlc29sdmUiLCJhc3NldHNTdWJEaXJlY3RvcnkiLCJkZWZhdWx0VGVtcGxhdGUiLCJqb2luIiwiZGV2U2VydmVyIiwiaG90IiwicG9ydCIsIm9wZW4iLCJvdmVybGF5IiwiZGV2IiwiaG9zdCIsImVudiIsIk5PREVfRU5WIiwic2hvd0VzbGludEVycm9yc0luT3ZlcmxheSIsImNhY2hlQnVzdGluZyIsImNzc1NvdXJjZU1hcCIsImJ1aWxkIiwicHJvZHVjdGlvblNvdXJjZU1hcCIsIkNSQU5FX0JVSUxEX01PREUiLCJidW5kbGVBbmFseXplclJlcG9ydCIsIm5wbV9jb25maWdfcmVwb3J0IiwicGFnZXMiLCJjb25maWciLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0QsR0FBUixFQUFaO0FBQ0EsTUFBTUUsYUFBYSxHQUFHO0FBQ2xCQyxFQUFBQSxTQUFTLEVBQUUsSUFETztBQUVsQkMsRUFBQUEsT0FBTyxFQUFFLFlBRlM7QUFHbEJDLEVBQUFBLGNBQWMsRUFBRSxLQUhFO0FBSWxCQyxFQUFBQSx3QkFBd0IsRUFBRSxDQUFDLElBQUQsRUFBTyxLQUFQLENBSlI7QUFLbEJDLEVBQUFBLFVBQVUsRUFBRUMsY0FBS0MsT0FBTCxDQUFhVCxHQUFiLEVBQWtCLFFBQWxCLENBTE07QUFNbEJVLEVBQUFBLGtCQUFrQixFQUFFLFFBTkY7QUFPbEJDLEVBQUFBLGVBQWUsRUFBRUgsY0FBS0ksSUFBTCxDQUFVWixHQUFWLEVBQWUsdUJBQWYsQ0FQQztBQVNsQjtBQUNBYSxFQUFBQSxTQUFTLEVBQUU7QUFDUEMsSUFBQUEsR0FBRyxFQUFFLElBREU7QUFFUEMsSUFBQUEsSUFBSSxFQUFFLElBRkM7QUFHUEMsSUFBQUEsSUFBSSxFQUFFLElBSEM7QUFJUEMsSUFBQUEsT0FBTyxFQUFFO0FBSkYsR0FWTztBQWlCbEJDLEVBQUFBLEdBQUcsRUFBRTtBQUNEQyxJQUFBQSxJQUFJLEVBQUUsV0FETDtBQUVEO0FBQ0FULElBQUFBLGtCQUFrQixFQUFFLFFBSG5CO0FBS0Q7QUFDQTtBQUNBO0FBQ0FQLElBQUFBLFNBQVMsRUFBRUYsT0FBTyxDQUFDbUIsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBUm5DO0FBU0Q7QUFDQTtBQUNBQyxJQUFBQSx5QkFBeUIsRUFBRSxLQVgxQjs7QUFhRDtBQUNSO0FBQ0E7QUFFUTtBQUNBbEIsSUFBQUEsT0FBTyxFQUFFLGdDQWxCUjtBQW9CRDtBQUNBO0FBQ0E7QUFDQW1CLElBQUFBLFlBQVksRUFBRSxJQXZCYjtBQXlCREMsSUFBQUEsWUFBWSxFQUFFO0FBekJiLEdBakJhO0FBNkNsQkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0g7QUFDQWxCLElBQUFBLFVBQVUsRUFBRUMsY0FBS0MsT0FBTCxDQUFhVCxHQUFiLEVBQWtCLFFBQWxCLENBRlQ7QUFHSFUsSUFBQUEsa0JBQWtCLEVBQUUsUUFIakI7O0FBS0g7QUFDUjtBQUNBO0FBRVFnQixJQUFBQSxtQkFBbUIsRUFBRXpCLE9BQU8sQ0FBQ21CLEdBQVIsQ0FBWU8sZ0JBQVosS0FBaUMsWUFUbkQ7QUFVSDtBQUNBdkIsSUFBQUEsT0FBTyxFQUFFLFlBWE47QUFhSDtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxJQUFBQSxjQUFjLEVBQUUsS0FqQmI7QUFrQkhDLElBQUFBLHdCQUF3QixFQUFFLENBQUMsSUFBRCxFQUFPLEtBQVAsQ0FsQnZCO0FBb0JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0FzQixJQUFBQSxvQkFBb0IsRUFBRTNCLE9BQU8sQ0FBQ21CLEdBQVIsQ0FBWVM7QUF4Qi9CLEdBN0NXO0FBd0VsQkMsRUFBQUEsS0FBSyxFQUFFO0FBeEVXLENBQXRCO0FBMEVBLE1BQU1DLE1BQU0sR0FBRyx3QkFDWDdCLGFBRFcsRUFFWDhCLE9BQU8sQ0FBQ3hCLGNBQUtDLE9BQUwsQ0FBYVQsR0FBYixFQUFrQixpQkFBbEIsQ0FBRCxDQUZJLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSdcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmNvbnN0IGN3ZCA9IHByb2Nlc3MuY3dkKClcbmNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gICAgdXNlRXNsaW50OiB0cnVlLFxuICAgIGRldnRvb2w6ICdzb3VyY2UtbWFwJyxcbiAgICBwcm9kdWN0aW9uR3ppcDogZmFsc2UsXG4gICAgcHJvZHVjdGlvbkd6aXBFeHRlbnNpb25zOiBbJ2pzJywgJ2NzcyddLFxuICAgIGFzc2V0c1Jvb3Q6IHBhdGgucmVzb2x2ZShjd2QsICcuL2Rpc3QnKSxcbiAgICBhc3NldHNTdWJEaXJlY3Rvcnk6ICdzdGF0aWMnLFxuICAgIGRlZmF1bHRUZW1wbGF0ZTogcGF0aC5qb2luKGN3ZCwgJy4vdGVtcGxhdGVzL2luZGV4LnB1ZycpLFxuXG4gICAgLy8gaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL2Rldi1zZXJ2ZXIvXG4gICAgZGV2U2VydmVyOiB7XG4gICAgICAgIGhvdDogdHJ1ZSxcbiAgICAgICAgcG9ydDogODA4MCxcbiAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICB9LFxuXG4gICAgZGV2OiB7XG4gICAgICAgIGhvc3Q6ICdsb2NhbGhvc3QnLFxuICAgICAgICAvLyBQYXRoc1xuICAgICAgICBhc3NldHNTdWJEaXJlY3Rvcnk6ICdzdGF0aWMnLFxuXG4gICAgICAgIC8vIFVzZSBFc2xpbnQgTG9hZGVyP1xuICAgICAgICAvLyBJZiB0cnVlLCB5b3VyIGNvZGUgd2lsbCBiZSBsaW50ZWQgZHVyaW5nIGJ1bmRsaW5nIGFuZFxuICAgICAgICAvLyBsaW50aW5nIGVycm9ycyBhbmQgd2FybmluZ3Mgd2lsbCBiZSBzaG93biBpbiB0aGUgY29uc29sZS5cbiAgICAgICAgdXNlRXNsaW50OiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAvLyBJZiB0cnVlLCBlc2xpbnQgZXJyb3JzIGFuZCB3YXJuaW5ncyB3aWxsIGFsc28gYmUgc2hvd24gaW4gdGhlIGVycm9yIG92ZXJsYXlcbiAgICAgICAgLy8gaW4gdGhlIGJyb3dzZXIuXG4gICAgICAgIHNob3dFc2xpbnRFcnJvcnNJbk92ZXJsYXk6IGZhbHNlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTb3VyY2UgTWFwc1xuICAgICAgICAgKi9cblxuICAgICAgICAvLyBodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vZGV2dG9vbC8jZGV2ZWxvcG1lbnRcbiAgICAgICAgZGV2dG9vbDogJ2lubGluZS1jaGVhcC1tb2R1bGUtc291cmNlLW1hcCcsXG5cbiAgICAgICAgLy8gSWYgeW91IGhhdmUgcHJvYmxlbXMgZGVidWdnaW5nIHZ1ZS1maWxlcyBpbiBkZXZ0b29scyxcbiAgICAgICAgLy8gc2V0IHRoaXMgdG8gZmFsc2UgLSBpdCAqbWF5KiBoZWxwXG4gICAgICAgIC8vIGh0dHBzOi8vdnVlLWxvYWRlci52dWVqcy5vcmcvZW4vb3B0aW9ucy5odG1sI2NhY2hlYnVzdGluZ1xuICAgICAgICBjYWNoZUJ1c3Rpbmc6IHRydWUsXG5cbiAgICAgICAgY3NzU291cmNlTWFwOiB0cnVlLFxuICAgIH0sXG5cbiAgICBidWlsZDoge1xuICAgICAgICAvLyBQYXRoc1xuICAgICAgICBhc3NldHNSb290OiBwYXRoLnJlc29sdmUoY3dkLCAnLi9kaXN0JyksXG4gICAgICAgIGFzc2V0c1N1YkRpcmVjdG9yeTogJ3N0YXRpYycsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNvdXJjZSBNYXBzXG4gICAgICAgICAqL1xuXG4gICAgICAgIHByb2R1Y3Rpb25Tb3VyY2VNYXA6IHByb2Nlc3MuZW52LkNSQU5FX0JVSUxEX01PREUgIT09ICdwcm9kdWN0aW9uJyxcbiAgICAgICAgLy8gaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL2RldnRvb2wvI3Byb2R1Y3Rpb25cbiAgICAgICAgZGV2dG9vbDogJ3NvdXJjZS1tYXAnLFxuXG4gICAgICAgIC8vIEd6aXAgb2ZmIGJ5IGRlZmF1bHQgYXMgbWFueSBwb3B1bGFyIHN0YXRpYyBob3N0cyBzdWNoIGFzXG4gICAgICAgIC8vIFN1cmdlIG9yIE5ldGxpZnkgYWxyZWFkeSBnemlwIGFsbCBzdGF0aWMgYXNzZXRzIGZvciB5b3UuXG4gICAgICAgIC8vIEJlZm9yZSBzZXR0aW5nIHRvIGB0cnVlYCwgbWFrZSBzdXJlIHRvOlxuICAgICAgICAvLyBucG0gaW5zdGFsbCAtLXNhdmUtZGV2IGNvbXByZXNzaW9uLXdlYnBhY2stcGx1Z2luXG4gICAgICAgIHByb2R1Y3Rpb25HemlwOiBmYWxzZSxcbiAgICAgICAgcHJvZHVjdGlvbkd6aXBFeHRlbnNpb25zOiBbJ2pzJywgJ2NzcyddLFxuXG4gICAgICAgIC8vIFJ1biB0aGUgYnVpbGQgY29tbWFuZCB3aXRoIGFuIGV4dHJhIGFyZ3VtZW50IHRvXG4gICAgICAgIC8vIFZpZXcgdGhlIGJ1bmRsZSBhbmFseXplciByZXBvcnQgYWZ0ZXIgYnVpbGQgZmluaXNoZXM6XG4gICAgICAgIC8vIGBucG0gcnVuIGJ1aWxkIC0tcmVwb3J0YFxuICAgICAgICAvLyBTZXQgdG8gYHRydWVgIG9yIGBmYWxzZWAgdG8gYWx3YXlzIHR1cm4gaXQgb24gb3Igb2ZmXG4gICAgICAgIGJ1bmRsZUFuYWx5emVyUmVwb3J0OiBwcm9jZXNzLmVudi5ucG1fY29uZmlnX3JlcG9ydCxcbiAgICB9LFxuXG4gICAgcGFnZXM6IFtdLFxufVxuY29uc3QgY29uZmlnID0gZGVlcG1lcmdlKFxuICAgIGRlZmF1bHRDb25maWcsXG4gICAgcmVxdWlyZShwYXRoLnJlc29sdmUoY3dkLCAnY3JhbmUuY29uZmlnLmpzJykpXG4pXG5cbmV4cG9ydCB7IGNvbmZpZyB9XG4iXX0=