"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = void 0;

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cwd = process.cwd();
const defaultConfig = {
  useEslint: true,
  devtool: 'source-map',
  productionGzip: false,
  productionGzipExtensions: ['js', 'css'],
  assetsRoot: _path.default.resolve(cwd, './dist'),
  assetsSubDirectory: 'static',
  // https://webpack.js.org/configuration/dev-server/
  devServer: {
    hot: true,
    port: 8080,
    open: true,
    overlay: true
  },
  dev: {
    host: 'localhost',
    // Paths
    assetsSubDirectory: 'static',
    // Use Eslint Loader?
    // If true, your code will be linted during bundling and
    // linting errors and warnings will be shown in the console.
    useEslint: process.env.NODE_ENV !== 'production',
    // If true, eslint errors and warnings will also be shown in the error overlay
    // in the browser.
    showEslintErrorsInOverlay: false,

    /**
     * Source Maps
     */
    // https://webpack.js.org/configuration/devtool/#development
    devtool: 'inline-cheap-module-source-map',
    // If you have problems debugging vue-files in devtools,
    // set this to false - it *may* help
    // https://vue-loader.vuejs.org/en/options.html#cachebusting
    cacheBusting: true,
    cssSourceMap: true
  },
  build: {
    // Paths
    assetsRoot: _path.default.resolve(cwd, './dist'),
    assetsSubDirectory: 'static',

    /**
     * Source Maps
     */
    productionSourceMap: process.env.CRANE_BUILD_MODE !== 'production',
    // https://webpack.js.org/configuration/devtool/#production
    devtool: 'source-map',
    // Gzip off by default as many popular static hosts such as
    // Surge or Netlify already gzip all static assets for you.
    // Before setting to `true`, make sure to:
    // npm install --save-dev compression-webpack-plugin
    productionGzip: false,
    productionGzipExtensions: ['js', 'css'],
    // Run the build command with an extra argument to
    // View the bundle analyzer report after build finishes:
    // `npm run build --report`
    // Set to `true` or `false` to always turn it on or off
    bundleAnalyzerReport: process.env.npm_config_report
  },
  pages: []
};
const config = (0, _deepmerge.default)(defaultConfig, require(_path.default.resolve(cwd, 'crane.config.js')));
exports.config = config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvaW5kZXguanMiXSwibmFtZXMiOlsiY3dkIiwicHJvY2VzcyIsImRlZmF1bHRDb25maWciLCJ1c2VFc2xpbnQiLCJkZXZ0b29sIiwicHJvZHVjdGlvbkd6aXAiLCJwcm9kdWN0aW9uR3ppcEV4dGVuc2lvbnMiLCJhc3NldHNSb290IiwicGF0aCIsInJlc29sdmUiLCJhc3NldHNTdWJEaXJlY3RvcnkiLCJkZXZTZXJ2ZXIiLCJob3QiLCJwb3J0Iiwib3BlbiIsIm92ZXJsYXkiLCJkZXYiLCJob3N0IiwiZW52IiwiTk9ERV9FTlYiLCJzaG93RXNsaW50RXJyb3JzSW5PdmVybGF5IiwiY2FjaGVCdXN0aW5nIiwiY3NzU291cmNlTWFwIiwiYnVpbGQiLCJwcm9kdWN0aW9uU291cmNlTWFwIiwiQ1JBTkVfQlVJTERfTU9ERSIsImJ1bmRsZUFuYWx5emVyUmVwb3J0IiwibnBtX2NvbmZpZ19yZXBvcnQiLCJwYWdlcyIsImNvbmZpZyIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLEdBQUcsR0FBR0MsT0FBTyxDQUFDRCxHQUFSLEVBQVo7QUFDQSxNQUFNRSxhQUFhLEdBQUc7QUFDbEJDLEVBQUFBLFNBQVMsRUFBRSxJQURPO0FBRWxCQyxFQUFBQSxPQUFPLEVBQUUsWUFGUztBQUdsQkMsRUFBQUEsY0FBYyxFQUFFLEtBSEU7QUFJbEJDLEVBQUFBLHdCQUF3QixFQUFFLENBQUMsSUFBRCxFQUFPLEtBQVAsQ0FKUjtBQUtsQkMsRUFBQUEsVUFBVSxFQUFFQyxjQUFLQyxPQUFMLENBQWFULEdBQWIsRUFBa0IsUUFBbEIsQ0FMTTtBQU1sQlUsRUFBQUEsa0JBQWtCLEVBQUUsUUFORjtBQVFsQjtBQUNBQyxFQUFBQSxTQUFTLEVBQUU7QUFDUEMsSUFBQUEsR0FBRyxFQUFFLElBREU7QUFFUEMsSUFBQUEsSUFBSSxFQUFFLElBRkM7QUFHUEMsSUFBQUEsSUFBSSxFQUFFLElBSEM7QUFJUEMsSUFBQUEsT0FBTyxFQUFFO0FBSkYsR0FUTztBQWdCbEJDLEVBQUFBLEdBQUcsRUFBRTtBQUNEQyxJQUFBQSxJQUFJLEVBQUUsV0FETDtBQUVEO0FBQ0FQLElBQUFBLGtCQUFrQixFQUFFLFFBSG5CO0FBS0Q7QUFDQTtBQUNBO0FBQ0FQLElBQUFBLFNBQVMsRUFBRUYsT0FBTyxDQUFDaUIsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBUm5DO0FBU0Q7QUFDQTtBQUNBQyxJQUFBQSx5QkFBeUIsRUFBRSxLQVgxQjs7QUFhRDtBQUNSO0FBQ0E7QUFFUTtBQUNBaEIsSUFBQUEsT0FBTyxFQUFFLGdDQWxCUjtBQW9CRDtBQUNBO0FBQ0E7QUFDQWlCLElBQUFBLFlBQVksRUFBRSxJQXZCYjtBQXlCREMsSUFBQUEsWUFBWSxFQUFFO0FBekJiLEdBaEJhO0FBNENsQkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0g7QUFDQWhCLElBQUFBLFVBQVUsRUFBRUMsY0FBS0MsT0FBTCxDQUFhVCxHQUFiLEVBQWtCLFFBQWxCLENBRlQ7QUFHSFUsSUFBQUEsa0JBQWtCLEVBQUUsUUFIakI7O0FBS0g7QUFDUjtBQUNBO0FBRVFjLElBQUFBLG1CQUFtQixFQUFFdkIsT0FBTyxDQUFDaUIsR0FBUixDQUFZTyxnQkFBWixLQUFpQyxZQVRuRDtBQVVIO0FBQ0FyQixJQUFBQSxPQUFPLEVBQUUsWUFYTjtBQWFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLGNBQWMsRUFBRSxLQWpCYjtBQWtCSEMsSUFBQUEsd0JBQXdCLEVBQUUsQ0FBQyxJQUFELEVBQU8sS0FBUCxDQWxCdkI7QUFvQkg7QUFDQTtBQUNBO0FBQ0E7QUFDQW9CLElBQUFBLG9CQUFvQixFQUFFekIsT0FBTyxDQUFDaUIsR0FBUixDQUFZUztBQXhCL0IsR0E1Q1c7QUF1RWxCQyxFQUFBQSxLQUFLLEVBQUU7QUF2RVcsQ0FBdEI7QUF5RUEsTUFBTUMsTUFBTSxHQUFHLHdCQUNYM0IsYUFEVyxFQUVYNEIsT0FBTyxDQUFDdEIsY0FBS0MsT0FBTCxDQUFhVCxHQUFiLEVBQWtCLGlCQUFsQixDQUFELENBRkksQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcblxuY29uc3QgY3dkID0gcHJvY2Vzcy5jd2QoKVxuY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcbiAgICB1c2VFc2xpbnQ6IHRydWUsXG4gICAgZGV2dG9vbDogJ3NvdXJjZS1tYXAnLFxuICAgIHByb2R1Y3Rpb25HemlwOiBmYWxzZSxcbiAgICBwcm9kdWN0aW9uR3ppcEV4dGVuc2lvbnM6IFsnanMnLCAnY3NzJ10sXG4gICAgYXNzZXRzUm9vdDogcGF0aC5yZXNvbHZlKGN3ZCwgJy4vZGlzdCcpLFxuICAgIGFzc2V0c1N1YkRpcmVjdG9yeTogJ3N0YXRpYycsXG5cbiAgICAvLyBodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vZGV2LXNlcnZlci9cbiAgICBkZXZTZXJ2ZXI6IHtcbiAgICAgICAgaG90OiB0cnVlLFxuICAgICAgICBwb3J0OiA4MDgwLFxuICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICBvdmVybGF5OiB0cnVlLFxuICAgIH0sXG5cbiAgICBkZXY6IHtcbiAgICAgICAgaG9zdDogJ2xvY2FsaG9zdCcsXG4gICAgICAgIC8vIFBhdGhzXG4gICAgICAgIGFzc2V0c1N1YkRpcmVjdG9yeTogJ3N0YXRpYycsXG5cbiAgICAgICAgLy8gVXNlIEVzbGludCBMb2FkZXI/XG4gICAgICAgIC8vIElmIHRydWUsIHlvdXIgY29kZSB3aWxsIGJlIGxpbnRlZCBkdXJpbmcgYnVuZGxpbmcgYW5kXG4gICAgICAgIC8vIGxpbnRpbmcgZXJyb3JzIGFuZCB3YXJuaW5ncyB3aWxsIGJlIHNob3duIGluIHRoZSBjb25zb2xlLlxuICAgICAgICB1c2VFc2xpbnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG4gICAgICAgIC8vIElmIHRydWUsIGVzbGludCBlcnJvcnMgYW5kIHdhcm5pbmdzIHdpbGwgYWxzbyBiZSBzaG93biBpbiB0aGUgZXJyb3Igb3ZlcmxheVxuICAgICAgICAvLyBpbiB0aGUgYnJvd3Nlci5cbiAgICAgICAgc2hvd0VzbGludEVycm9yc0luT3ZlcmxheTogZmFsc2UsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNvdXJjZSBNYXBzXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8vIGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9kZXZ0b29sLyNkZXZlbG9wbWVudFxuICAgICAgICBkZXZ0b29sOiAnaW5saW5lLWNoZWFwLW1vZHVsZS1zb3VyY2UtbWFwJyxcblxuICAgICAgICAvLyBJZiB5b3UgaGF2ZSBwcm9ibGVtcyBkZWJ1Z2dpbmcgdnVlLWZpbGVzIGluIGRldnRvb2xzLFxuICAgICAgICAvLyBzZXQgdGhpcyB0byBmYWxzZSAtIGl0ICptYXkqIGhlbHBcbiAgICAgICAgLy8gaHR0cHM6Ly92dWUtbG9hZGVyLnZ1ZWpzLm9yZy9lbi9vcHRpb25zLmh0bWwjY2FjaGVidXN0aW5nXG4gICAgICAgIGNhY2hlQnVzdGluZzogdHJ1ZSxcblxuICAgICAgICBjc3NTb3VyY2VNYXA6IHRydWUsXG4gICAgfSxcblxuICAgIGJ1aWxkOiB7XG4gICAgICAgIC8vIFBhdGhzXG4gICAgICAgIGFzc2V0c1Jvb3Q6IHBhdGgucmVzb2x2ZShjd2QsICcuL2Rpc3QnKSxcbiAgICAgICAgYXNzZXRzU3ViRGlyZWN0b3J5OiAnc3RhdGljJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU291cmNlIE1hcHNcbiAgICAgICAgICovXG5cbiAgICAgICAgcHJvZHVjdGlvblNvdXJjZU1hcDogcHJvY2Vzcy5lbnYuQ1JBTkVfQlVJTERfTU9ERSAhPT0gJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAvLyBodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vZGV2dG9vbC8jcHJvZHVjdGlvblxuICAgICAgICBkZXZ0b29sOiAnc291cmNlLW1hcCcsXG5cbiAgICAgICAgLy8gR3ppcCBvZmYgYnkgZGVmYXVsdCBhcyBtYW55IHBvcHVsYXIgc3RhdGljIGhvc3RzIHN1Y2ggYXNcbiAgICAgICAgLy8gU3VyZ2Ugb3IgTmV0bGlmeSBhbHJlYWR5IGd6aXAgYWxsIHN0YXRpYyBhc3NldHMgZm9yIHlvdS5cbiAgICAgICAgLy8gQmVmb3JlIHNldHRpbmcgdG8gYHRydWVgLCBtYWtlIHN1cmUgdG86XG4gICAgICAgIC8vIG5wbSBpbnN0YWxsIC0tc2F2ZS1kZXYgY29tcHJlc3Npb24td2VicGFjay1wbHVnaW5cbiAgICAgICAgcHJvZHVjdGlvbkd6aXA6IGZhbHNlLFxuICAgICAgICBwcm9kdWN0aW9uR3ppcEV4dGVuc2lvbnM6IFsnanMnLCAnY3NzJ10sXG5cbiAgICAgICAgLy8gUnVuIHRoZSBidWlsZCBjb21tYW5kIHdpdGggYW4gZXh0cmEgYXJndW1lbnQgdG9cbiAgICAgICAgLy8gVmlldyB0aGUgYnVuZGxlIGFuYWx5emVyIHJlcG9ydCBhZnRlciBidWlsZCBmaW5pc2hlczpcbiAgICAgICAgLy8gYG5wbSBydW4gYnVpbGQgLS1yZXBvcnRgXG4gICAgICAgIC8vIFNldCB0byBgdHJ1ZWAgb3IgYGZhbHNlYCB0byBhbHdheXMgdHVybiBpdCBvbiBvciBvZmZcbiAgICAgICAgYnVuZGxlQW5hbHl6ZXJSZXBvcnQ6IHByb2Nlc3MuZW52Lm5wbV9jb25maWdfcmVwb3J0LFxuICAgIH0sXG5cbiAgICBwYWdlczogW10sXG59XG5jb25zdCBjb25maWcgPSBkZWVwbWVyZ2UoXG4gICAgZGVmYXVsdENvbmZpZyxcbiAgICByZXF1aXJlKHBhdGgucmVzb2x2ZShjd2QsICdjcmFuZS5jb25maWcuanMnKSlcbilcblxuZXhwb3J0IHsgY29uZmlnIH1cbiJdfQ==